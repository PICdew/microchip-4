

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Feb 22 21:03:50 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.41
    20                           ; Generated 25/01/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F1619 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0090                     	;# 
    91  0091                     	;# 
    92  0092                     	;# 
    93  0093                     	;# 
    94  0094                     	;# 
    95  0095                     	;# 
    96  0096                     	;# 
    97  0098                     	;# 
    98  0099                     	;# 
    99  009A                     	;# 
   100  009B                     	;# 
   101  009B                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  0111                     	;# 
   110  0112                     	;# 
   111  0113                     	;# 
   112  0114                     	;# 
   113  0115                     	;# 
   114  0116                     	;# 
   115  0117                     	;# 
   116  0118                     	;# 
   117  0119                     	;# 
   118  011C                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  018E                     	;# 
   122  0191                     	;# 
   123  0191                     	;# 
   124  0192                     	;# 
   125  0193                     	;# 
   126  0193                     	;# 
   127  0194                     	;# 
   128  0195                     	;# 
   129  0196                     	;# 
   130  0197                     	;# 
   131  0199                     	;# 
   132  0199                     	;# 
   133  0199                     	;# 
   134  019A                     	;# 
   135  019A                     	;# 
   136  019A                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019B                     	;# 
   142  019C                     	;# 
   143  019C                     	;# 
   144  019C                     	;# 
   145  019D                     	;# 
   146  019D                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149  019E                     	;# 
   150  019E                     	;# 
   151  019F                     	;# 
   152  019F                     	;# 
   153  019F                     	;# 
   154  019F                     	;# 
   155  019F                     	;# 
   156  020C                     	;# 
   157  020D                     	;# 
   158  020E                     	;# 
   159  0211                     	;# 
   160  0211                     	;# 
   161  0212                     	;# 
   162  0212                     	;# 
   163  0213                     	;# 
   164  0213                     	;# 
   165  0214                     	;# 
   166  0214                     	;# 
   167  0215                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0215                     	;# 
   171  0216                     	;# 
   172  0216                     	;# 
   173  0217                     	;# 
   174  0217                     	;# 
   175  028C                     	;# 
   176  028D                     	;# 
   177  028E                     	;# 
   178  0291                     	;# 
   179  0291                     	;# 
   180  0292                     	;# 
   181  0293                     	;# 
   182  0294                     	;# 
   183  0298                     	;# 
   184  0298                     	;# 
   185  0299                     	;# 
   186  029A                     	;# 
   187  029B                     	;# 
   188  029E                     	;# 
   189  030C                     	;# 
   190  030D                     	;# 
   191  030E                     	;# 
   192  038C                     	;# 
   193  038D                     	;# 
   194  038E                     	;# 
   195  0391                     	;# 
   196  0392                     	;# 
   197  0393                     	;# 
   198  0394                     	;# 
   199  0395                     	;# 
   200  0396                     	;# 
   201  0397                     	;# 
   202  0398                     	;# 
   203  0399                     	;# 
   204  040E                     	;# 
   205  0413                     	;# 
   206  0413                     	;# 
   207  0414                     	;# 
   208  0414                     	;# 
   209  0415                     	;# 
   210  0416                     	;# 
   211  0417                     	;# 
   212  0418                     	;# 
   213  041A                     	;# 
   214  041A                     	;# 
   215  041B                     	;# 
   216  041B                     	;# 
   217  041C                     	;# 
   218  041D                     	;# 
   219  041E                     	;# 
   220  041F                     	;# 
   221  0493                     	;# 
   222  0494                     	;# 
   223  0495                     	;# 
   224  0496                     	;# 
   225  049A                     	;# 
   226  049B                     	;# 
   227  049C                     	;# 
   228  049D                     	;# 
   229  058C                     	;# 
   230  058C                     	;# 
   231  058D                     	;# 
   232  058E                     	;# 
   233  058E                     	;# 
   234  058F                     	;# 
   235  0590                     	;# 
   236  0590                     	;# 
   237  0591                     	;# 
   238  0592                     	;# 
   239  0592                     	;# 
   240  0593                     	;# 
   241  0594                     	;# 
   242  0594                     	;# 
   243  0595                     	;# 
   244  0596                     	;# 
   245  0596                     	;# 
   246  0597                     	;# 
   247  0598                     	;# 
   248  0599                     	;# 
   249  059A                     	;# 
   250  059B                     	;# 
   251  059B                     	;# 
   252  059C                     	;# 
   253  059D                     	;# 
   254  060C                     	;# 
   255  060C                     	;# 
   256  060D                     	;# 
   257  060E                     	;# 
   258  060F                     	;# 
   259  060F                     	;# 
   260  0610                     	;# 
   261  0611                     	;# 
   262  0612                     	;# 
   263  0613                     	;# 
   264  0614                     	;# 
   265  0617                     	;# 
   266  0618                     	;# 
   267  0619                     	;# 
   268  061A                     	;# 
   269  061B                     	;# 
   270  061C                     	;# 
   271  0691                     	;# 
   272  0692                     	;# 
   273  0693                     	;# 
   274  0694                     	;# 
   275  0695                     	;# 
   276  0696                     	;# 
   277  0697                     	;# 
   278  0699                     	;# 
   279  069A                     	;# 
   280  0711                     	;# 
   281  0712                     	;# 
   282  0713                     	;# 
   283  0714                     	;# 
   284  0715                     	;# 
   285  0718                     	;# 
   286  0718                     	;# 
   287  0719                     	;# 
   288  071A                     	;# 
   289  071A                     	;# 
   290  071B                     	;# 
   291  071C                     	;# 
   292  071D                     	;# 
   293  0791                     	;# 
   294  0791                     	;# 
   295  0792                     	;# 
   296  0793                     	;# 
   297  0793                     	;# 
   298  0794                     	;# 
   299  0795                     	;# 
   300  0795                     	;# 
   301  0796                     	;# 
   302  0797                     	;# 
   303  0797                     	;# 
   304  0798                     	;# 
   305  0799                     	;# 
   306  079A                     	;# 
   307  080C                     	;# 
   308  080C                     	;# 
   309  080D                     	;# 
   310  080E                     	;# 
   311  080E                     	;# 
   312  080F                     	;# 
   313  0810                     	;# 
   314  0810                     	;# 
   315  0811                     	;# 
   316  0812                     	;# 
   317  0812                     	;# 
   318  0813                     	;# 
   319  0814                     	;# 
   320  0815                     	;# 
   321  0816                     	;# 
   322  0817                     	;# 
   323  0818                     	;# 
   324  0819                     	;# 
   325  081A                     	;# 
   326  081A                     	;# 
   327  081B                     	;# 
   328  081C                     	;# 
   329  081C                     	;# 
   330  081D                     	;# 
   331  088C                     	;# 
   332  088D                     	;# 
   333  088E                     	;# 
   334  088F                     	;# 
   335  088F                     	;# 
   336  0890                     	;# 
   337  0891                     	;# 
   338  0892                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0894                     	;# 
   342  0895                     	;# 
   343  0896                     	;# 
   344  0897                     	;# 
   345  0897                     	;# 
   346  0898                     	;# 
   347  0899                     	;# 
   348  0D8C                     	;# 
   349  0D8C                     	;# 
   350  0D8D                     	;# 
   351  0D8E                     	;# 
   352  0D8F                     	;# 
   353  0D8F                     	;# 
   354  0D90                     	;# 
   355  0D91                     	;# 
   356  0D92                     	;# 
   357  0D92                     	;# 
   358  0D93                     	;# 
   359  0D94                     	;# 
   360  0D95                     	;# 
   361  0D95                     	;# 
   362  0D96                     	;# 
   363  0D97                     	;# 
   364  0D98                     	;# 
   365  0D99                     	;# 
   366  0D9A                     	;# 
   367  0D9B                     	;# 
   368  0D9C                     	;# 
   369  0D9D                     	;# 
   370  0D9E                     	;# 
   371  0D9E                     	;# 
   372  0D9F                     	;# 
   373  0DA0                     	;# 
   374  0DA1                     	;# 
   375  0DA1                     	;# 
   376  0DA2                     	;# 
   377  0DA3                     	;# 
   378  0DA4                     	;# 
   379  0DA4                     	;# 
   380  0DA5                     	;# 
   381  0DA6                     	;# 
   382  0DA7                     	;# 
   383  0DA7                     	;# 
   384  0DA8                     	;# 
   385  0DA9                     	;# 
   386  0DAA                     	;# 
   387  0DAB                     	;# 
   388  0DAC                     	;# 
   389  0DAD                     	;# 
   390  0DAE                     	;# 
   391  0DAF                     	;# 
   392  0E0F                     	;# 
   393  0E10                     	;# 
   394  0E11                     	;# 
   395  0E12                     	;# 
   396  0E13                     	;# 
   397  0E14                     	;# 
   398  0E15                     	;# 
   399  0E16                     	;# 
   400  0E17                     	;# 
   401  0E18                     	;# 
   402  0E19                     	;# 
   403  0E1A                     	;# 
   404  0E1B                     	;# 
   405  0E1C                     	;# 
   406  0E1D                     	;# 
   407  0E1E                     	;# 
   408  0E1F                     	;# 
   409  0E20                     	;# 
   410  0E21                     	;# 
   411  0E22                     	;# 
   412  0E23                     	;# 
   413  0E24                     	;# 
   414  0E25                     	;# 
   415  0E26                     	;# 
   416  0E27                     	;# 
   417  0E28                     	;# 
   418  0E29                     	;# 
   419  0E2A                     	;# 
   420  0E2B                     	;# 
   421  0E2C                     	;# 
   422  0E2D                     	;# 
   423  0E2E                     	;# 
   424  0E90                     	;# 
   425  0E91                     	;# 
   426  0E92                     	;# 
   427  0E94                     	;# 
   428  0E95                     	;# 
   429  0E9C                     	;# 
   430  0E9D                     	;# 
   431  0E9E                     	;# 
   432  0E9F                     	;# 
   433  0EA0                     	;# 
   434  0EA1                     	;# 
   435  0EA2                     	;# 
   436  0EA3                     	;# 
   437  0EA4                     	;# 
   438  0EA5                     	;# 
   439  0EA6                     	;# 
   440  0EA7                     	;# 
   441  0F0F                     	;# 
   442  0F10                     	;# 
   443  0F11                     	;# 
   444  0F12                     	;# 
   445  0F13                     	;# 
   446  0F14                     	;# 
   447  0F15                     	;# 
   448  0F16                     	;# 
   449  0F17                     	;# 
   450  0F18                     	;# 
   451  0F19                     	;# 
   452  0F1A                     	;# 
   453  0F1B                     	;# 
   454  0F1C                     	;# 
   455  0F1D                     	;# 
   456  0F1E                     	;# 
   457  0F1F                     	;# 
   458  0F20                     	;# 
   459  0F21                     	;# 
   460  0F22                     	;# 
   461  0F23                     	;# 
   462  0F24                     	;# 
   463  0F25                     	;# 
   464  0F26                     	;# 
   465  0F27                     	;# 
   466  0F28                     	;# 
   467  0F29                     	;# 
   468  0F2A                     	;# 
   469  0F2B                     	;# 
   470  0F2C                     	;# 
   471  0F2D                     	;# 
   472  0F2E                     	;# 
   473  0F2F                     	;# 
   474  0F30                     	;# 
   475  0F31                     	;# 
   476  0F32                     	;# 
   477  0F33                     	;# 
   478  0F34                     	;# 
   479  0F35                     	;# 
   480  0F36                     	;# 
   481  0F37                     	;# 
   482  0FE4                     	;# 
   483  0FE5                     	;# 
   484  0FE6                     	;# 
   485  0FE7                     	;# 
   486  0FE8                     	;# 
   487  0FE9                     	;# 
   488  0FEA                     	;# 
   489  0FEB                     	;# 
   490  0FED                     	;# 
   491  0FEE                     	;# 
   492  0FEF                     	;# 
   493  000C                     _PORTAbits	set	12
   494  008D                     _TRISB	set	141
   495  008E                     _TRISC	set	142
   496  010D                     _LATBbits	set	269
   497  010E                     _LATCbits	set	270
   498  010C                     _LATA	set	268
   499  010D                     _LATB	set	269
   500  010E                     _LATC	set	270
   501  018C                     _ANSELAbits	set	396
   502                           
   503                           ; #config settings
   504  0000                     
   505                           	psect	cinit
   506  07FD                     start_initialization:	
   507  07FD                     __initialization:	
   508  07FD                     end_of_initialization:	
   509                           ;End of C runtime variable initialization code
   510                           
   511  07FD                     __end_of__initialization:	
   512  07FD  0020               	movlb	0
   513  07FE  3186  2EA1         	ljmp	_main	;jump to C main() function
   514                           
   515                           	psect	cstackCOMMON
   516  0070                     __pcstackCOMMON:	
   517  0070                     ?_button_is_pressed:	
   518  0070                     ??_button_is_pressed:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     ?_show_led_up_to:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0070                     ?_delay_ms:	
   525                           ; 1 bytes @ 0x0
   526                           
   527  0070                     ?_clear_leds:	
   528                           ; 1 bytes @ 0x0
   529                           
   530  0070                     ?_blink_score:	
   531                           ; 1 bytes @ 0x0
   532                           
   533  0070                     ?_turn_led_on:	
   534                           ; 1 bytes @ 0x0
   535                           
   536  0070                     ??_turn_led_on:	
   537                           ; 1 bytes @ 0x0
   538                           
   539  0070                     ?_turn_led_off:	
   540                           ; 1 bytes @ 0x0
   541                           
   542  0070                     ??_turn_led_off:	
   543                           ; 1 bytes @ 0x0
   544                           
   545  0070                     ?_main:	
   546                           ; 1 bytes @ 0x0
   547                           
   548  0070                     ?___wmul:	
   549                           ; 2 bytes @ 0x0
   550                           
   551  0070                     button_is_pressed@button:	
   552                           ; 2 bytes @ 0x0
   553                           
   554  0070                     turn_led_on@led:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     turn_led_off@led:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     delay_ms@milliseconds:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ___wmul@multiplier:	
   564                           ; 2 bytes @ 0x0
   565                           
   566                           
   567                           ; 2 bytes @ 0x0
   568  0070                     	ds	1
   569  0071                     ??_clear_leds:	
   570                           
   571                           ; 1 bytes @ 0x1
   572  0071                     	ds	1
   573  0072                     ??_delay_ms:	
   574  0072                     clear_leds@count:	
   575                           ; 1 bytes @ 0x2
   576                           
   577  0072                     ___wmul@multiplicand:	
   578                           ; 1 bytes @ 0x2
   579                           
   580                           
   581                           ; 2 bytes @ 0x2
   582  0072                     	ds	1
   583  0073                     ??_show_led_up_to:	
   584  0073                     ?_do_run:	
   585                           ; 1 bytes @ 0x3
   586                           
   587  0073                     do_run@delay:	
   588                           ; 1 bytes @ 0x3
   589                           
   590                           
   591                           ; 2 bytes @ 0x3
   592  0073                     	ds	1
   593  0074                     ??___wmul:	
   594  0074                     show_led_up_to@led_count:	
   595                           ; 1 bytes @ 0x4
   596                           
   597  0074                     ___wmul@product:	
   598                           ; 1 bytes @ 0x4
   599                           
   600                           
   601                           ; 2 bytes @ 0x4
   602  0074                     	ds	1
   603  0075                     ??_do_run:	
   604  0075                     show_led_up_to@count:	
   605                           ; 1 bytes @ 0x5
   606                           
   607                           
   608                           ; 1 bytes @ 0x5
   609  0075                     	ds	1
   610  0076                     ??_blink_score:	
   611  0076                     do_run@dir:	
   612                           ; 1 bytes @ 0x6
   613                           
   614                           
   615                           ; 1 bytes @ 0x6
   616  0076                     	ds	1
   617  0077                     blink_score@score:	
   618  0077                     do_run@led:	
   619                           ; 1 bytes @ 0x7
   620                           
   621                           
   622                           ; 1 bytes @ 0x7
   623  0077                     	ds	1
   624  0078                     blink_score@i:	
   625  0078                     do_run@count:	
   626                           ; 1 bytes @ 0x8
   627                           
   628                           
   629                           ; 1 bytes @ 0x8
   630  0078                     	ds	1
   631                           
   632                           	psect	cstackBANK0
   633  0020                     __pcstackBANK0:	
   634  0020                     ??_main:	
   635                           
   636                           ; 1 bytes @ 0x0
   637  0020                     	ds	7
   638  0027                     main@count:	
   639                           
   640                           ; 2 bytes @ 0x7
   641  0027                     	ds	2
   642  0029                     main@difficulty_timeout:	
   643                           
   644                           ; 2 bytes @ 0x9
   645  0029                     	ds	2
   646  002B                     main@fail:	
   647                           
   648                           ; 1 bytes @ 0xB
   649  002B                     	ds	1
   650  002C                     main@response_time:	
   651                           
   652                           ; 2 bytes @ 0xC
   653  002C                     	ds	2
   654  002E                     main@score:	
   655                           
   656                           ; 1 bytes @ 0xE
   657  002E                     	ds	1
   658  002F                     main@difficulty:	
   659                           
   660                           ; 1 bytes @ 0xF
   661  002F                     	ds	1
   662                           
   663                           	psect	maintext
   664  06A1                     __pmaintext:	
   665 ;;
   666 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
   667 ;;
   668 ;; *************** function _main *****************
   669 ;; Defined at:
   670 ;;		line 69 in file "blinky.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  response_tim    2   12[BANK0 ] unsigned int 
   675 ;;  difficulty_t    2    9[BANK0 ] unsigned int 
   676 ;;  count           2    7[BANK0 ] unsigned int 
   677 ;;  difficulty      1   15[BANK0 ] unsigned char 
   678 ;;  score           1   14[BANK0 ] unsigned char 
   679 ;;  fail            1   11[BANK0 ] unsigned char 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  2   38[None  ] int 
   682 ;; Registers used:
   683 ;;		wreg, status,2, status,0, pclath, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : B1F/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   690 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
   691 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
   692 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
   693 ;;Total ram usage:       16 bytes
   694 ;; Hardware stack levels required when called:    4
   695 ;; This function calls:
   696 ;;		___wmul
   697 ;;		_blink_score
   698 ;;		_button_is_pressed
   699 ;;		_clear_leds
   700 ;;		_delay_ms
   701 ;;		_do_run
   702 ;;		_show_led_up_to
   703 ;; This function is called by:
   704 ;;		Startup code after reset
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           
   709                           ;psect for function _main
   710  06A1                     _main:	
   711                           
   712                           ;blinky.c: 71: TRISC = 0;
   713                           
   714                           ;incstack = 0
   715                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   716  06A1  0021               	movlb	1	; select bank1
   717  06A2  018E               	clrf	14	;volatile
   718                           
   719                           ;blinky.c: 72: TRISB = 0x3F;
   720  06A3  303F               	movlw	63
   721  06A4  008D               	movwf	13	;volatile
   722                           
   723                           ;blinky.c: 74: ANSELAbits.ANSA4 = 0;
   724  06A5  0023               	movlb	3	; select bank3
   725  06A6  120C               	bcf	12,4	;volatile
   726                           
   727                           ;blinky.c: 76: LATC = 0x00;
   728  06A7  0022               	movlb	2	; select bank2
   729  06A8  018E               	clrf	14	;volatile
   730                           
   731                           ;blinky.c: 77: LATB = 0x00;
   732  06A9  018D               	clrf	13	;volatile
   733                           
   734                           ;blinky.c: 78: LATA = 0x00;
   735  06AA  018C               	clrf	12	;volatile
   736                           
   737                           ;blinky.c: 80: uint8_t score = 0;
   738  06AB  0020               	movlb	0	; select bank0
   739  06AC  01AE               	clrf	main@score
   740                           
   741                           ;blinky.c: 81: uint16_t response_time = 0;
   742  06AD  01AC               	clrf	main@response_time
   743  06AE  01AD               	clrf	main@response_time+1
   744                           
   745                           ;blinky.c: 82: uint16_t difficulty_timeout = 1;
   746  06AF  3001               	movlw	1
   747  06B0  00A9               	movwf	main@difficulty_timeout
   748  06B1  3000               	movlw	0
   749  06B2  00AA               	movwf	main@difficulty_timeout+1
   750                           
   751                           ;blinky.c: 83: uint16_t count = 0;
   752  06B3  01A7               	clrf	main@count
   753  06B4  01A8               	clrf	main@count+1
   754                           
   755                           ;blinky.c: 84: uint8_t fail = 0;
   756  06B5  01AB               	clrf	main@fail
   757                           
   758                           ;blinky.c: 86: uint8_t difficulty = 1;
   759  06B6  01AF               	clrf	main@difficulty
   760  06B7  0AAF               	incf	main@difficulty,f
   761  06B8                     l1039:	
   762                           ;blinky.c: 88: while (1)
   763                           
   764                           
   765                           ;blinky.c: 89: {
   766                           ;blinky.c: 90: if (button_is_pressed(1))
   767  06B8  3001               	movlw	1
   768  06B9  3185  2570  3186   	fcall	_button_is_pressed
   769  06BC  3A00               	xorlw	0
   770  06BD  1903               	skipnz
   771  06BE  2F08               	goto	l1069
   772                           
   773                           ;blinky.c: 91: {
   774                           ;blinky.c: 92: show_led_up_to(difficulty);
   775  06BF  0020               	movlb	0	; select bank0
   776  06C0  082F               	movf	main@difficulty,w
   777  06C1  3185  2583  3186   	fcall	_show_led_up_to
   778                           
   779                           ;blinky.c: 93: delay_ms(500);
   780  06C4  30F4               	movlw	244
   781  06C5  00F0               	movwf	delay_ms@milliseconds
   782  06C6  3001               	movlw	1
   783  06C7  00F1               	movwf	delay_ms@milliseconds+1
   784  06C8  3185  2552  3186   	fcall	_delay_ms
   785                           
   786                           ;blinky.c: 94: difficulty_timeout = 0;
   787  06CB  0020               	movlb	0	; select bank0
   788  06CC  01A9               	clrf	main@difficulty_timeout
   789  06CD  01AA               	clrf	main@difficulty_timeout+1
   790  06CE                     l1067:	
   791                           ;blinky.c: 95: while (difficulty_timeout < 200)
   792                           
   793  06CE  3000               	movlw	0
   794  06CF  0020               	movlb	0	; select bank0
   795  06D0  022A               	subwf	main@difficulty_timeout+1,w
   796  06D1  30C8               	movlw	200
   797  06D2  1903               	skipnz
   798  06D3  0229               	subwf	main@difficulty_timeout,w
   799  06D4  1803               	btfsc	3,0
   800  06D5  2F08               	goto	l1069
   801                           
   802                           ;blinky.c: 96: {
   803                           ;blinky.c: 97: difficulty_timeout += 1;
   804  06D6  3001               	movlw	1
   805  06D7  07A9               	addwf	main@difficulty_timeout,f
   806  06D8  3000               	movlw	0
   807  06D9  3DAA               	addwfc	main@difficulty_timeout+1,f
   808                           
   809                           ;blinky.c: 98: if (button_is_pressed(1))
   810  06DA  3001               	movlw	1
   811  06DB  3185  2570  3186   	fcall	_button_is_pressed
   812  06DE  3A00               	xorlw	0
   813  06DF  1903               	skipnz
   814  06E0  2EFA               	goto	l1061
   815                           
   816                           ;blinky.c: 99: {
   817                           ;blinky.c: 100: difficulty += 1;
   818  06E1  3001               	movlw	1
   819  06E2  0020               	movlb	0	; select bank0
   820  06E3  00A0               	movwf	??_main
   821  06E4  0820               	movf	??_main,w
   822  06E5  07AF               	addwf	main@difficulty,f
   823                           
   824                           ;blinky.c: 101: if (difficulty > 4)
   825  06E6  3005               	movlw	5
   826  06E7  022F               	subwf	main@difficulty,w
   827  06E8  1C03               	skipc
   828  06E9  2EEC               	goto	l1055
   829                           
   830                           ;blinky.c: 102: {
   831                           ;blinky.c: 103: difficulty = 1;
   832  06EA  01AF               	clrf	main@difficulty
   833  06EB  0AAF               	incf	main@difficulty,f
   834  06EC                     l1055:	
   835                           
   836                           ;blinky.c: 104: }
   837                           ;blinky.c: 105: show_led_up_to(difficulty);
   838  06EC  082F               	movf	main@difficulty,w
   839  06ED  3185  2583  3186   	fcall	_show_led_up_to
   840                           
   841                           ;blinky.c: 106: difficulty_timeout = 0;
   842  06F0  0020               	movlb	0	; select bank0
   843  06F1  01A9               	clrf	main@difficulty_timeout
   844  06F2  01AA               	clrf	main@difficulty_timeout+1
   845                           
   846                           ;blinky.c: 107: delay_ms(200);
   847  06F3  30C8               	movlw	200
   848  06F4  00F0               	movwf	delay_ms@milliseconds
   849  06F5  3000               	movlw	0
   850  06F6  00F1               	movwf	delay_ms@milliseconds+1
   851  06F7  3185  2552  3186   	fcall	_delay_ms
   852  06FA                     l1061:	
   853                           
   854                           ;blinky.c: 108: }
   855                           ;blinky.c: 109: delay_ms(10);
   856  06FA  300A               	movlw	10
   857  06FB  00F0               	movwf	delay_ms@milliseconds
   858  06FC  3000               	movlw	0
   859  06FD  00F1               	movwf	delay_ms@milliseconds+1
   860  06FE  3185  2552  3186   	fcall	_delay_ms
   861                           
   862                           ;blinky.c: 110: if (button_is_pressed(2))
   863  0701  3002               	movlw	2
   864  0702  3185  2570  3186   	fcall	_button_is_pressed
   865  0705  3A00               	xorlw	0
   866  0706  1903               	skipnz
   867  0707  2ECE               	goto	l1067
   868  0708                     l1069:	
   869                           ;blinky.c: 111: {
   870                           ;blinky.c: 112: break;
   871                           
   872                           
   873                           ;blinky.c: 113: }
   874                           ;blinky.c: 115: }
   875                           ;blinky.c: 117: }
   876                           ;blinky.c: 119: clear_leds();
   877  0708  3185  255F  3186   	fcall	_clear_leds
   878                           
   879                           ;blinky.c: 121: if (button_is_pressed(2))
   880  070B  3002               	movlw	2
   881  070C  3185  2570  3186   	fcall	_button_is_pressed
   882  070F  3A00               	xorlw	0
   883  0710  1903               	skipnz
   884  0711  2EB8               	goto	l1039
   885                           
   886                           ;blinky.c: 122: {
   887                           ;blinky.c: 123: difficulty = 4 - difficulty;
   888  0712  0020               	movlb	0	; select bank0
   889  0713  032F               	decf	main@difficulty,w
   890  0714  3AFF               	xorlw	255
   891  0715  3E04               	addlw	4
   892  0716  00A0               	movwf	??_main
   893  0717  0820               	movf	??_main,w
   894  0718  00AF               	movwf	main@difficulty
   895                           
   896                           ;blinky.c: 124: do_run(1, 100);
   897  0719  3064               	movlw	100
   898  071A  00F3               	movwf	do_run@delay
   899  071B  3000               	movlw	0
   900  071C  00F4               	movwf	do_run@delay+1
   901  071D  3001               	movlw	1
   902  071E  3185  25B3  3186   	fcall	_do_run
   903                           
   904                           ;blinky.c: 125: do_run(0, 100);
   905  0721  3064               	movlw	100
   906  0722  00F3               	movwf	do_run@delay
   907  0723  3000               	movlw	0
   908  0724  00F4               	movwf	do_run@delay+1
   909  0725  3000               	movlw	0
   910  0726  3185  25B3  3186   	fcall	_do_run
   911                           
   912                           ;blinky.c: 127: fail = 0;
   913  0729  0020               	movlb	0	; select bank0
   914  072A  01AB               	clrf	main@fail
   915                           
   916                           ;blinky.c: 128: count = 0;
   917  072B  01A7               	clrf	main@count
   918  072C  01A8               	clrf	main@count+1
   919                           
   920                           ;blinky.c: 129: while (count < 300)
   921  072D  2F3A               	goto	l1089
   922  072E                     l1085:	
   923                           ;blinky.c: 134: break;
   924                           
   925                           
   926                           ;blinky.c: 135: }
   927                           ;blinky.c: 136: count += 1;
   928  072E  3001               	movlw	1
   929  072F  0020               	movlb	0	; select bank0
   930  0730  07A7               	addwf	main@count,f
   931  0731  3000               	movlw	0
   932  0732  3DA8               	addwfc	main@count+1,f
   933                           
   934                           ;blinky.c: 137: delay_ms(10);
   935  0733  300A               	movlw	10
   936  0734  00F0               	movwf	delay_ms@milliseconds
   937  0735  3000               	movlw	0
   938  0736  00F1               	movwf	delay_ms@milliseconds+1
   939  0737  3185  2552  3186   	fcall	_delay_ms
   940  073A                     l1089:	
   941  073A  3001               	movlw	1
   942  073B  0020               	movlb	0	; select bank0
   943  073C  0228               	subwf	main@count+1,w
   944  073D  302C               	movlw	44
   945  073E  1903               	skipnz
   946  073F  0227               	subwf	main@count,w
   947  0740  1803               	btfsc	3,0
   948  0741  2F53               	goto	l1091
   949                           
   950                           ;blinky.c: 130: {
   951                           ;blinky.c: 131: if (button_is_pressed(1) || button_is_pressed(2))
   952  0742  3001               	movlw	1
   953  0743  3185  2570  3186   	fcall	_button_is_pressed
   954  0746  3A00               	xorlw	0
   955  0747  1D03               	skipz
   956  0748  2F50               	goto	l52
   957  0749  3002               	movlw	2
   958  074A  3185  2570  3186   	fcall	_button_is_pressed
   959  074D  3A00               	xorlw	0
   960  074E  1903               	skipnz
   961  074F  2F2E               	goto	l1085
   962  0750                     l52:	
   963                           
   964                           ;blinky.c: 132: {
   965                           ;blinky.c: 133: fail = 1;
   966  0750  0020               	movlb	0	; select bank0
   967  0751  01AB               	clrf	main@fail
   968  0752  0AAB               	incf	main@fail,f
   969  0753                     l1091:	
   970                           
   971                           ;blinky.c: 138: }
   972                           ;blinky.c: 140: show_led_up_to(10);
   973  0753  300A               	movlw	10
   974  0754  3185  2583  3186   	fcall	_show_led_up_to
   975                           
   976                           ;blinky.c: 141: response_time = 0;
   977  0757  0020               	movlb	0	; select bank0
   978  0758  01AC               	clrf	main@response_time
   979  0759  01AD               	clrf	main@response_time+1
   980                           
   981                           ;blinky.c: 142: while (!button_is_pressed(2) && !fail)
   982  075A  2F7A               	goto	l1107
   983  075B                     l1095:	
   984                           
   985                           ;blinky.c: 143: {
   986                           ;blinky.c: 144: response_time += 1;
   987  075B  3001               	movlw	1
   988  075C  07AC               	addwf	main@response_time,f
   989  075D  3000               	movlw	0
   990  075E  3DAD               	addwfc	main@response_time+1,f
   991                           
   992                           ;blinky.c: 145: delay_ms(1);
   993  075F  3001               	movlw	1
   994  0760  00F0               	movwf	delay_ms@milliseconds
   995  0761  3000               	movlw	0
   996  0762  00F1               	movwf	delay_ms@milliseconds+1
   997  0763  3185  2552  3186   	fcall	_delay_ms
   998                           
   999                           ;blinky.c: 147: if (response_time > 1000)
  1000  0766  3003               	movlw	3
  1001  0767  0020               	movlb	0	; select bank0
  1002  0768  022D               	subwf	main@response_time+1,w
  1003  0769  30E9               	movlw	233
  1004  076A  1903               	skipnz
  1005  076B  022C               	subwf	main@response_time,w
  1006  076C  1C03               	skipc
  1007  076D  2F73               	goto	l1103
  1008                           
  1009                           ;blinky.c: 148: {
  1010                           ;blinky.c: 149: response_time = 1000;
  1011  076E  30E8               	movlw	232
  1012  076F  00AC               	movwf	main@response_time
  1013  0770  3003               	movlw	3
  1014  0771  00AD               	movwf	main@response_time+1
  1015                           
  1016                           ;blinky.c: 150: break;
  1017  0772  2F85               	goto	l1111
  1018  0773                     l1103:	
  1019                           
  1020                           ;blinky.c: 151: }
  1021                           ;blinky.c: 152: if (button_is_pressed(1))
  1022  0773  3001               	movlw	1
  1023  0774  3185  2570  3186   	fcall	_button_is_pressed
  1024  0777  3A00               	xorlw	0
  1025  0778  1D03               	btfss	3,2
  1026  0779  2F85               	goto	l1111
  1027  077A                     l1107:	
  1028                           ;blinky.c: 153: {
  1029                           ;blinky.c: 154: break;
  1030                           
  1031  077A  3002               	movlw	2
  1032  077B  3185  2570  3186   	fcall	_button_is_pressed
  1033  077E  3A00               	xorlw	0
  1034  077F  1D03               	skipz
  1035  0780  2F85               	goto	l1111
  1036  0781  0020               	movlb	0	; select bank0
  1037  0782  082B               	movf	main@fail,w
  1038  0783  1903               	btfsc	3,2
  1039  0784  2F5B               	goto	l1095
  1040  0785                     l1111:	
  1041                           
  1042                           ;blinky.c: 155: }
  1043                           ;blinky.c: 156: }
  1044                           ;blinky.c: 158: clear_leds();
  1045  0785  3185  255F  3186   	fcall	_clear_leds
  1046                           
  1047                           ;blinky.c: 160: if (fail)
  1048  0788  0020               	movlb	0	; select bank0
  1049  0789  082B               	movf	main@fail,w
  1050  078A  1903               	btfsc	3,2
  1051  078B  2F90               	goto	l1117
  1052                           
  1053                           ;blinky.c: 161: {
  1054                           ;blinky.c: 162: score = 10;
  1055  078C  300A               	movlw	10
  1056  078D  00A0               	movwf	??_main
  1057  078E  0820               	movf	??_main,w
  1058  078F  2FDA               	goto	L1
  1059  0790                     l1117:	
  1060                           ;blinky.c: 163: }
  1061                           
  1062                           
  1063                           ;blinky.c: 164: else if (response_time < (100 + (50 * difficulty)))
  1064  0790  082F               	movf	main@difficulty,w
  1065  0791  00A0               	movwf	??_main
  1066  0792  01A1               	clrf	??_main+1
  1067  0793  0820               	movf	??_main,w
  1068  0794  00F0               	movwf	___wmul@multiplier
  1069  0795  0821               	movf	??_main+1,w
  1070  0796  00F1               	movwf	___wmul@multiplier+1
  1071  0797  3032               	movlw	50
  1072  0798  00F2               	movwf	___wmul@multiplicand
  1073  0799  3000               	movlw	0
  1074  079A  00F3               	movwf	___wmul@multiplicand+1
  1075  079B  3185  2598  3186   	fcall	___wmul
  1076  079E  0870               	movf	?___wmul,w
  1077  079F  3E64               	addlw	100
  1078  07A0  0020               	movlb	0	; select bank0
  1079  07A1  00A2               	movwf	??_main+2
  1080  07A2  3000               	movlw	0
  1081  07A3  3D71               	addwfc	?___wmul+1,w
  1082  07A4  00A3               	movwf	??_main+3
  1083  07A5  0823               	movf	??_main+3,w
  1084  07A6  022D               	subwf	main@response_time+1,w
  1085  07A7  1D03               	skipz
  1086  07A8  2FAB               	goto	u1025
  1087  07A9  0822               	movf	??_main+2,w
  1088  07AA  022C               	subwf	main@response_time,w
  1089  07AB                     u1025:	
  1090  07AB  1803               	skipnc
  1091  07AC  2FAF               	goto	l1121
  1092                           
  1093                           ;blinky.c: 165: {
  1094                           ;blinky.c: 166: score = 0;
  1095  07AD  01AE               	clrf	main@score
  1096                           
  1097                           ;blinky.c: 167: }
  1098  07AE  2FDB               	goto	l1123
  1099  07AF                     l1121:	
  1100                           
  1101                           ;blinky.c: 168: else
  1102                           ;blinky.c: 169: {
  1103                           ;blinky.c: 170: score = (response_time - (75 + (50 * difficulty))) >> (3 + difficulty);
  1104  07AF  082F               	movf	main@difficulty,w
  1105  07B0  00A0               	movwf	??_main
  1106  07B1  01A1               	clrf	??_main+1
  1107  07B2  0820               	movf	??_main,w
  1108  07B3  00F0               	movwf	___wmul@multiplier
  1109  07B4  0821               	movf	??_main+1,w
  1110  07B5  00F1               	movwf	___wmul@multiplier+1
  1111  07B6  3032               	movlw	50
  1112  07B7  00F2               	movwf	___wmul@multiplicand
  1113  07B8  3000               	movlw	0
  1114  07B9  00F3               	movwf	___wmul@multiplicand+1
  1115  07BA  3185  2598  3186   	fcall	___wmul
  1116  07BD  0870               	movf	?___wmul,w
  1117  07BE  3E4B               	addlw	75
  1118  07BF  0020               	movlb	0	; select bank0
  1119  07C0  00A2               	movwf	??_main+2
  1120  07C1  3000               	movlw	0
  1121  07C2  3D71               	addwfc	?___wmul+1,w
  1122  07C3  00A3               	movwf	??_main+3
  1123  07C4  09A2               	comf	??_main+2,f
  1124  07C5  09A3               	comf	??_main+3,f
  1125  07C6  0AA2               	incf	??_main+2,f
  1126  07C7  1903               	skipnz
  1127  07C8  0AA3               	incf	??_main+3,f
  1128  07C9  082C               	movf	main@response_time,w
  1129  07CA  0722               	addwf	??_main+2,w
  1130  07CB  00A4               	movwf	??_main+4
  1131  07CC  082D               	movf	main@response_time+1,w
  1132  07CD  3D23               	addwfc	??_main+3,w
  1133  07CE  00A5               	movwf	??_main+5
  1134  07CF  082F               	movf	main@difficulty,w
  1135  07D0  3E03               	addlw	3
  1136  07D1  0A89               	incf	9,f
  1137  07D2  2FD5               	goto	u1034
  1138  07D3                     u1035:	
  1139  07D3  36A5               	lsrf	??_main+5,f
  1140  07D4  0CA4               	rrf	??_main+4,f
  1141  07D5                     u1034:	
  1142  07D5  0B89               	decfsz	9,f
  1143  07D6  2FD3               	goto	u1035
  1144  07D7  0824               	movf	??_main+4,w
  1145  07D8  00A6               	movwf	??_main+6
  1146  07D9  0826               	movf	??_main+6,w
  1147  07DA                     L1:	
  1148  07DA  00AE               	movwf	main@score
  1149  07DB                     l1123:	
  1150                           
  1151                           ;blinky.c: 172: }
  1152                           ;blinky.c: 173: if (score > 9)
  1153  07DB  300A               	movlw	10
  1154  07DC  022E               	subwf	main@score,w
  1155  07DD  1C03               	skipc
  1156  07DE  2FE3               	goto	l1127
  1157                           
  1158                           ;blinky.c: 174: {
  1159                           ;blinky.c: 175: score = 9;
  1160  07DF  3009               	movlw	9
  1161  07E0  00A0               	movwf	??_main
  1162  07E1  0820               	movf	??_main,w
  1163  07E2  00AE               	movwf	main@score
  1164  07E3                     l1127:	
  1165                           
  1166                           ;blinky.c: 176: }
  1167                           ;blinky.c: 178: score = 10 - score;
  1168  07E3  032E               	decf	main@score,w
  1169  07E4  3AFF               	xorlw	255
  1170  07E5  3E0A               	addlw	10
  1171  07E6  00A0               	movwf	??_main
  1172  07E7  0820               	movf	??_main,w
  1173  07E8  00AE               	movwf	main@score
  1174                           
  1175                           ;blinky.c: 179: delay_ms(1000);
  1176  07E9  30E8               	movlw	232
  1177  07EA  00F0               	movwf	delay_ms@milliseconds
  1178  07EB  3003               	movlw	3
  1179  07EC  00F1               	movwf	delay_ms@milliseconds+1
  1180  07ED  3185  2552  3186   	fcall	_delay_ms
  1181                           
  1182                           ;blinky.c: 180: blink_score(score);
  1183  07F0  0020               	movlb	0	; select bank0
  1184  07F1  082E               	movf	main@score,w
  1185  07F2  3185  25E0  3186   	fcall	_blink_score
  1186                           
  1187                           ;blinky.c: 182: difficulty = 4 - difficulty;
  1188  07F5  0020               	movlb	0	; select bank0
  1189  07F6  032F               	decf	main@difficulty,w
  1190  07F7  3AFF               	xorlw	255
  1191  07F8  3E04               	addlw	4
  1192  07F9  00A0               	movwf	??_main
  1193  07FA  0820               	movf	??_main,w
  1194  07FB  00AF               	movwf	main@difficulty
  1195  07FC  2EB8               	goto	l1039
  1196  07FD                     __end_of_main:	
  1197                           ;blinky.c: 183: }
  1198                           ;blinky.c: 186: }
  1199                           ;blinky.c: 187: return 0;
  1200                           ;	Return value of _main is never used
  1201                           
  1202                           
  1203                           	psect	text1
  1204  05B3                     __ptext1:	
  1205 ;; *************** function _do_run *****************
  1206 ;; Defined at:
  1207 ;;		line 209 in file "blinky.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;  dir             1    wreg     unsigned char 
  1210 ;;  delay           2    3[COMMON] unsigned int 
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;  dir             1    6[COMMON] unsigned char 
  1213 ;;  count           1    8[COMMON] unsigned char 
  1214 ;;  led             1    7[COMMON] unsigned char 
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      void 
  1217 ;; Registers used:
  1218 ;;		wreg, status,2, status,0, pclath, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1224 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1225 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1226 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1227 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1228 ;;Total ram usage:        6 bytes
  1229 ;; Hardware stack levels used:    1
  1230 ;; Hardware stack levels required when called:    2
  1231 ;; This function calls:
  1232 ;;		_clear_leds
  1233 ;;		_delay_ms
  1234 ;;		_turn_led_off
  1235 ;;		_turn_led_on
  1236 ;; This function is called by:
  1237 ;;		_main
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           
  1242                           ;psect for function _do_run
  1243  05B3                     _do_run:	
  1244                           
  1245                           ;incstack = 0
  1246                           ; Regs used in _do_run: [wreg+status,2+status,0+pclath+cstack]
  1247                           ;do_run@dir stored from wreg
  1248  05B3  00F6               	movwf	do_run@dir
  1249                           
  1250                           ;blinky.c: 211: uint8_t count = 1;
  1251  05B4  01F8               	clrf	do_run@count
  1252  05B5  0AF8               	incf	do_run@count,f
  1253                           
  1254                           ;blinky.c: 212: uint8_t led = 1;
  1255  05B6  01F7               	clrf	do_run@led
  1256  05B7  0AF7               	incf	do_run@led,f
  1257                           
  1258                           ;blinky.c: 213: clear_leds();
  1259  05B8  3185  255F  3185   	fcall	_clear_leds
  1260                           
  1261                           ;blinky.c: 214: for (count = 1; count <= 10; count++)
  1262  05BB  01F8               	clrf	do_run@count
  1263  05BC  0AF8               	incf	do_run@count,f
  1264  05BD                     L3:	
  1265  05BD  300B               	movlw	11
  1266  05BE  0278               	subwf	do_run@count,w
  1267  05BF  1803               	btfsc	3,0
  1268  05C0  0008               	return
  1269                           
  1270                           ;blinky.c: 215: {
  1271                           ;blinky.c: 217: if (dir)
  1272  05C1  0876               	movf	do_run@dir,w
  1273  05C2  1903               	btfsc	3,2
  1274  05C3  2DC6               	goto	l973
  1275                           
  1276                           ;blinky.c: 218: {
  1277                           ;blinky.c: 219: led = count;
  1278  05C4  0878               	movf	do_run@count,w
  1279  05C5  2DC9               	goto	L2
  1280  05C6                     l973:	
  1281                           ;blinky.c: 220: }
  1282                           
  1283                           
  1284                           ;blinky.c: 221: else
  1285                           ;blinky.c: 222: {
  1286                           ;blinky.c: 223: led = 10-count;
  1287  05C6  0378               	decf	do_run@count,w
  1288  05C7  3AFF               	xorlw	255
  1289  05C8  3E0A               	addlw	10
  1290  05C9                     L2:	
  1291  05C9  00F5               	movwf	??_do_run
  1292  05CA  0875               	movf	??_do_run,w
  1293  05CB  00F7               	movwf	do_run@led
  1294                           
  1295                           ;blinky.c: 224: }
  1296                           ;blinky.c: 225: turn_led_on(led);
  1297  05CC  0877               	movf	do_run@led,w
  1298  05CD  3186  265B  3185   	fcall	_turn_led_on
  1299                           
  1300                           ;blinky.c: 226: delay_ms(delay);
  1301  05D0  0874               	movf	do_run@delay+1,w
  1302  05D1  00F1               	movwf	delay_ms@milliseconds+1
  1303  05D2  0873               	movf	do_run@delay,w
  1304  05D3  00F0               	movwf	delay_ms@milliseconds
  1305  05D4  3185  2552  3185   	fcall	_delay_ms
  1306                           
  1307                           ;blinky.c: 227: turn_led_off(led);
  1308  05D7  0877               	movf	do_run@led,w
  1309  05D8  3186  2615  3185   	fcall	_turn_led_off
  1310  05DB  3001               	movlw	1
  1311  05DC  00F5               	movwf	??_do_run
  1312  05DD  0875               	movf	??_do_run,w
  1313  05DE  07F8               	addwf	do_run@count,f
  1314  05DF  2DBD               	goto	L3
  1315  05E0                     __end_of_do_run:	
  1316                           
  1317                           	psect	text2
  1318  0570                     __ptext2:	
  1319 ;; *************** function _button_is_pressed *****************
  1320 ;; Defined at:
  1321 ;;		line 260 in file "blinky.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;  button          1    wreg     unsigned char 
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;  button          1    0[COMMON] unsigned char 
  1326 ;; Return value:  Size  Location     Type
  1327 ;;                  1    wreg      unsigned char 
  1328 ;; Registers used:
  1329 ;;		wreg, status,2, status,0
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1338 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1339 ;;Total ram usage:        1 bytes
  1340 ;; Hardware stack levels used:    1
  1341 ;; This function calls:
  1342 ;;		Nothing
  1343 ;; This function is called by:
  1344 ;;		_main
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           
  1349                           ;psect for function _button_is_pressed
  1350  0570                     _button_is_pressed:	
  1351                           
  1352                           ;incstack = 0
  1353                           ; Regs used in _button_is_pressed: [wreg+status,2+status,0]
  1354                           ;button_is_pressed@button stored from wreg
  1355  0570  00F0               	movwf	button_is_pressed@button
  1356                           
  1357                           ;blinky.c: 262: if (button == 1)
  1358  0571  0370               	decf	button_is_pressed@button,w
  1359  0572  1D03               	btfss	3,2
  1360  0573  2D79               	goto	l949
  1361                           
  1362                           ;blinky.c: 263: {
  1363                           ;blinky.c: 264: return PORTAbits.RA5;
  1364  0574  0020               	movlb	0	; select bank0
  1365  0575  0E0C               	swapf	12,w	;volatile
  1366  0576  0C89               	rrf	9,f
  1367  0577  3901               	andlw	1
  1368  0578  0008               	return
  1369  0579                     l949:	
  1370                           ;blinky.c: 265: }
  1371                           
  1372                           
  1373                           ;blinky.c: 266: else if (button == 2)
  1374  0579  3002               	movlw	2
  1375  057A  0670               	xorwf	button_is_pressed@button,w
  1376  057B  1D03               	btfss	3,2
  1377  057C  2D81               	goto	l955
  1378                           
  1379                           ;blinky.c: 267: {
  1380                           ;blinky.c: 268: return PORTAbits.RA4;
  1381  057D  0020               	movlb	0	; select bank0
  1382  057E  0E0C               	swapf	12,w	;volatile
  1383  057F  3901               	andlw	1
  1384  0580  0008               	return
  1385  0581                     l955:	
  1386                           
  1387                           ;blinky.c: 269: }
  1388                           ;blinky.c: 270: return 0;
  1389  0581  3000               	movlw	0
  1390  0582  0008               	return
  1391  0583                     __end_of_button_is_pressed:	
  1392                           
  1393                           	psect	text3
  1394  05E0                     __ptext3:	
  1395 ;; *************** function _blink_score *****************
  1396 ;; Defined at:
  1397 ;;		line 190 in file "blinky.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  score           1    wreg     unsigned char 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  score           1    7[COMMON] unsigned char 
  1402 ;;  i               1    8[COMMON] unsigned char 
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  1    wreg      void 
  1405 ;; Registers used:
  1406 ;;		wreg, status,2, status,0, pclath, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1414 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1415 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1416 ;;Total ram usage:        3 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:    3
  1419 ;; This function calls:
  1420 ;;		_clear_leds
  1421 ;;		_delay_ms
  1422 ;;		_show_led_up_to
  1423 ;; This function is called by:
  1424 ;;		_main
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           
  1429                           ;psect for function _blink_score
  1430  05E0                     _blink_score:	
  1431                           
  1432                           ;incstack = 0
  1433                           ; Regs used in _blink_score: [wreg+status,2+status,0+pclath+cstack]
  1434                           ;blink_score@score stored from wreg
  1435  05E0  00F7               	movwf	blink_score@score
  1436                           
  1437                           ;blinky.c: 192: uint8_t i = 0;
  1438  05E1  01F8               	clrf	blink_score@i
  1439                           
  1440                           ;blinky.c: 193: clear_leds();
  1441  05E2  3185  255F  3185   	fcall	_clear_leds
  1442                           
  1443                           ;blinky.c: 195: for (i = 0; i < 4; i++)
  1444  05E5  01F8               	clrf	blink_score@i
  1445  05E6  3004               	movlw	4
  1446  05E7  0278               	subwf	blink_score@i,w
  1447  05E8  1803               	btfsc	3,0
  1448  05E9  2E07               	goto	l1001
  1449  05EA                     l995:	
  1450                           
  1451                           ;blinky.c: 196: {
  1452                           ;blinky.c: 197: show_led_up_to(score);
  1453  05EA  0877               	movf	blink_score@score,w
  1454  05EB  3185  2583  3185   	fcall	_show_led_up_to
  1455                           
  1456                           ;blinky.c: 198: delay_ms(250);
  1457  05EE  30FA               	movlw	250
  1458  05EF  00F0               	movwf	delay_ms@milliseconds
  1459  05F0  3000               	movlw	0
  1460  05F1  00F1               	movwf	delay_ms@milliseconds+1
  1461  05F2  3185  2552  3185   	fcall	_delay_ms
  1462                           
  1463                           ;blinky.c: 199: clear_leds();
  1464  05F5  3185  255F  3185   	fcall	_clear_leds
  1465                           
  1466                           ;blinky.c: 200: delay_ms(250);
  1467  05F8  30FA               	movlw	250
  1468  05F9  00F0               	movwf	delay_ms@milliseconds
  1469  05FA  3000               	movlw	0
  1470  05FB  00F1               	movwf	delay_ms@milliseconds+1
  1471  05FC  3185  2552  3185   	fcall	_delay_ms
  1472  05FF  3001               	movlw	1
  1473  0600  00F6               	movwf	??_blink_score
  1474  0601  0876               	movf	??_blink_score,w
  1475  0602  07F8               	addwf	blink_score@i,f
  1476  0603  3004               	movlw	4
  1477  0604  0278               	subwf	blink_score@i,w
  1478  0605  1C03               	skipc
  1479  0606  2DEA               	goto	l995
  1480  0607                     l1001:	
  1481                           
  1482                           ;blinky.c: 202: }
  1483                           ;blinky.c: 204: show_led_up_to(score);
  1484  0607  0877               	movf	blink_score@score,w
  1485  0608  3185  2583  3185   	fcall	_show_led_up_to
  1486                           
  1487                           ;blinky.c: 205: delay_ms(1000);
  1488  060B  30E8               	movlw	232
  1489  060C  00F0               	movwf	delay_ms@milliseconds
  1490  060D  3003               	movlw	3
  1491  060E  00F1               	movwf	delay_ms@milliseconds+1
  1492  060F  3185  2552  3185   	fcall	_delay_ms
  1493                           
  1494                           ;blinky.c: 206: clear_leds();
  1495  0612  3185  255F         	fcall	_clear_leds
  1496  0614  0008               	return
  1497  0615                     __end_of_blink_score:	
  1498                           
  1499                           	psect	text4
  1500  0583                     __ptext4:	
  1501 ;; *************** function _show_led_up_to *****************
  1502 ;; Defined at:
  1503 ;;		line 241 in file "blinky.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  led_count       1    wreg     unsigned char 
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  led_count       1    4[COMMON] unsigned char 
  1508 ;;  count           1    5[COMMON] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0, pclath, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1519 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1521 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1522 ;;Total ram usage:        3 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    2
  1525 ;; This function calls:
  1526 ;;		_clear_leds
  1527 ;;		_turn_led_on
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;;		_blink_score
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           
  1535                           ;psect for function _show_led_up_to
  1536  0583                     _show_led_up_to:	
  1537                           
  1538                           ;incstack = 0
  1539                           ; Regs used in _show_led_up_to: [wreg+status,2+status,0+pclath+cstack]
  1540                           ;show_led_up_to@led_count stored from wreg
  1541  0583  00F4               	movwf	show_led_up_to@led_count
  1542                           
  1543                           ;blinky.c: 243: uint8_t count = 1;
  1544  0584  01F5               	clrf	show_led_up_to@count
  1545  0585  0AF5               	incf	show_led_up_to@count,f
  1546                           
  1547                           ;blinky.c: 245: clear_leds();
  1548  0586  3185  255F  3185   	fcall	_clear_leds
  1549                           
  1550                           ;blinky.c: 246: for (count = 1; count <= led_count; count++)
  1551  0589  01F5               	clrf	show_led_up_to@count
  1552  058A  0AF5               	incf	show_led_up_to@count,f
  1553  058B                     l933:	
  1554  058B  0875               	movf	show_led_up_to@count,w
  1555  058C  0274               	subwf	show_led_up_to@led_count,w
  1556  058D  1C03               	btfss	3,0
  1557  058E  0008               	return
  1558                           
  1559                           ;blinky.c: 247: {
  1560                           ;blinky.c: 248: turn_led_on(count);
  1561  058F  0875               	movf	show_led_up_to@count,w
  1562  0590  3186  265B  3185   	fcall	_turn_led_on
  1563  0593  3001               	movlw	1
  1564  0594  00F3               	movwf	??_show_led_up_to
  1565  0595  0873               	movf	??_show_led_up_to,w
  1566  0596  07F5               	addwf	show_led_up_to@count,f
  1567  0597  2D8B               	goto	l933
  1568  0598                     __end_of_show_led_up_to:	
  1569                           
  1570                           	psect	text5
  1571  065B                     __ptext5:	
  1572 ;; *************** function _turn_led_on *****************
  1573 ;; Defined at:
  1574 ;;		line 273 in file "blinky.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  led             1    wreg     unsigned char 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  led             1    0[COMMON] unsigned char 
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      void 
  1581 ;; Registers used:
  1582 ;;		wreg, status,2, status,0
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1591 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1592 ;;Total ram usage:        1 bytes
  1593 ;; Hardware stack levels used:    1
  1594 ;; This function calls:
  1595 ;;		Nothing
  1596 ;; This function is called by:
  1597 ;;		_do_run
  1598 ;;		_show_led_up_to
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           
  1603                           ;psect for function _turn_led_on
  1604  065B                     _turn_led_on:	
  1605                           
  1606                           ;incstack = 0
  1607                           ; Regs used in _turn_led_on: [wreg+status,2+status,0]
  1608                           ;turn_led_on@led stored from wreg
  1609  065B  00F0               	movwf	turn_led_on@led
  1610                           
  1611                           ;blinky.c: 275: if (led == 1)
  1612  065C  0370               	decf	turn_led_on@led,w
  1613  065D  1D03               	btfss	3,2
  1614  065E  2E62               	goto	l887
  1615                           
  1616                           ;blinky.c: 276: {
  1617                           ;blinky.c: 277: LATCbits.LATC0 = 1;
  1618  065F  0022               	movlb	2	; select bank2
  1619  0660  140E               	bsf	14,0	;volatile
  1620                           
  1621                           ;blinky.c: 278: }
  1622  0661  0008               	return
  1623  0662                     l887:	
  1624                           
  1625                           ;blinky.c: 279: else if (led == 2)
  1626  0662  3002               	movlw	2
  1627  0663  0670               	xorwf	turn_led_on@led,w
  1628  0664  1D03               	btfss	3,2
  1629  0665  2E69               	goto	l891
  1630                           
  1631                           ;blinky.c: 280: {
  1632                           ;blinky.c: 281: LATCbits.LATC1 = 1;
  1633  0666  0022               	movlb	2	; select bank2
  1634  0667  148E               	bsf	14,1	;volatile
  1635                           
  1636                           ;blinky.c: 282: }
  1637  0668  0008               	return
  1638  0669                     l891:	
  1639                           
  1640                           ;blinky.c: 283: else if (led == 3)
  1641  0669  3003               	movlw	3
  1642  066A  0670               	xorwf	turn_led_on@led,w
  1643  066B  1D03               	btfss	3,2
  1644  066C  2E70               	goto	l895
  1645                           
  1646                           ;blinky.c: 284: {
  1647                           ;blinky.c: 285: LATCbits.LATC2 = 1;
  1648  066D  0022               	movlb	2	; select bank2
  1649  066E  150E               	bsf	14,2	;volatile
  1650                           
  1651                           ;blinky.c: 286: }
  1652  066F  0008               	return
  1653  0670                     l895:	
  1654                           
  1655                           ;blinky.c: 287: else if (led == 4)
  1656  0670  3004               	movlw	4
  1657  0671  0670               	xorwf	turn_led_on@led,w
  1658  0672  1D03               	btfss	3,2
  1659  0673  2E77               	goto	l899
  1660                           
  1661                           ;blinky.c: 288: {
  1662                           ;blinky.c: 289: LATCbits.LATC3 = 1;
  1663  0674  0022               	movlb	2	; select bank2
  1664  0675  158E               	bsf	14,3	;volatile
  1665                           
  1666                           ;blinky.c: 290: }
  1667  0676  0008               	return
  1668  0677                     l899:	
  1669                           
  1670                           ;blinky.c: 291: else if (led == 5)
  1671  0677  3005               	movlw	5
  1672  0678  0670               	xorwf	turn_led_on@led,w
  1673  0679  1D03               	btfss	3,2
  1674  067A  2E7E               	goto	l903
  1675                           
  1676                           ;blinky.c: 292: {
  1677                           ;blinky.c: 293: LATCbits.LATC4 = 1;
  1678  067B  0022               	movlb	2	; select bank2
  1679  067C  160E               	bsf	14,4	;volatile
  1680                           
  1681                           ;blinky.c: 294: }
  1682  067D  0008               	return
  1683  067E                     l903:	
  1684                           
  1685                           ;blinky.c: 295: else if (led == 6)
  1686  067E  3006               	movlw	6
  1687  067F  0670               	xorwf	turn_led_on@led,w
  1688  0680  1D03               	btfss	3,2
  1689  0681  2E85               	goto	l907
  1690                           
  1691                           ;blinky.c: 296: {
  1692                           ;blinky.c: 297: LATCbits.LATC5 = 1;
  1693  0682  0022               	movlb	2	; select bank2
  1694  0683  168E               	bsf	14,5	;volatile
  1695                           
  1696                           ;blinky.c: 298: }
  1697  0684  0008               	return
  1698  0685                     l907:	
  1699                           
  1700                           ;blinky.c: 299: else if (led == 7)
  1701  0685  3007               	movlw	7
  1702  0686  0670               	xorwf	turn_led_on@led,w
  1703  0687  1D03               	btfss	3,2
  1704  0688  2E8C               	goto	l911
  1705                           
  1706                           ;blinky.c: 300: {
  1707                           ;blinky.c: 301: LATCbits.LATC6 = 1;
  1708  0689  0022               	movlb	2	; select bank2
  1709  068A  170E               	bsf	14,6	;volatile
  1710                           
  1711                           ;blinky.c: 302: }
  1712  068B  0008               	return
  1713  068C                     l911:	
  1714                           
  1715                           ;blinky.c: 303: else if (led == 8)
  1716  068C  3008               	movlw	8
  1717  068D  0670               	xorwf	turn_led_on@led,w
  1718  068E  1D03               	btfss	3,2
  1719  068F  2E93               	goto	l915
  1720                           
  1721                           ;blinky.c: 304: {
  1722                           ;blinky.c: 305: LATCbits.LATC7 = 1;
  1723  0690  0022               	movlb	2	; select bank2
  1724  0691  178E               	bsf	14,7	;volatile
  1725                           
  1726                           ;blinky.c: 306: }
  1727  0692  0008               	return
  1728  0693                     l915:	
  1729                           
  1730                           ;blinky.c: 307: else if (led == 9)
  1731  0693  3009               	movlw	9
  1732  0694  0670               	xorwf	turn_led_on@led,w
  1733  0695  1D03               	btfss	3,2
  1734  0696  2E9A               	goto	l919
  1735                           
  1736                           ;blinky.c: 308: {
  1737                           ;blinky.c: 309: LATBbits.LATB7 = 1;
  1738  0697  0022               	movlb	2	; select bank2
  1739  0698  178D               	bsf	13,7	;volatile
  1740                           
  1741                           ;blinky.c: 310: }
  1742  0699  0008               	return
  1743  069A                     l919:	
  1744                           
  1745                           ;blinky.c: 311: else if (led == 10)
  1746  069A  300A               	movlw	10
  1747  069B  0670               	xorwf	turn_led_on@led,w
  1748  069C  1D03               	btfss	3,2
  1749  069D  0008               	return
  1750                           
  1751                           ;blinky.c: 312: {
  1752                           ;blinky.c: 313: LATBbits.LATB6 = 1;
  1753  069E  0022               	movlb	2	; select bank2
  1754  069F  170D               	bsf	13,6	;volatile
  1755  06A0  0008               	return
  1756  06A1                     __end_of_turn_led_on:	
  1757                           
  1758                           	psect	text6
  1759  055F                     __ptext6:	
  1760 ;; *************** function _clear_leds *****************
  1761 ;; Defined at:
  1762 ;;		line 232 in file "blinky.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;		None
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;  count           1    2[COMMON] unsigned char 
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  1    wreg      void 
  1769 ;; Registers used:
  1770 ;;		wreg, status,2, status,0, pclath, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1778 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1779 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1780 ;;Total ram usage:        2 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    1
  1783 ;; This function calls:
  1784 ;;		_turn_led_off
  1785 ;; This function is called by:
  1786 ;;		_main
  1787 ;;		_blink_score
  1788 ;;		_do_run
  1789 ;;		_show_led_up_to
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           
  1794                           ;psect for function _clear_leds
  1795  055F                     _clear_leds:	
  1796                           
  1797                           ;blinky.c: 234: uint8_t count = 1;
  1798                           
  1799                           ;incstack = 0
  1800                           ; Regs used in _clear_leds: [wreg+status,2+status,0+pclath+cstack]
  1801  055F  01F2               	clrf	clear_leds@count
  1802  0560  0AF2               	incf	clear_leds@count,f
  1803                           
  1804                           ;blinky.c: 235: for (count = 1; count <= 10; count++)
  1805  0561  01F2               	clrf	clear_leds@count
  1806  0562  0AF2               	incf	clear_leds@count,f
  1807  0563                     L4:	
  1808  0563  300B               	movlw	11
  1809  0564  0272               	subwf	clear_leds@count,w
  1810  0565  1803               	btfsc	3,0
  1811  0566  0008               	return
  1812                           
  1813                           ;blinky.c: 236: {
  1814                           ;blinky.c: 237: turn_led_off(count);
  1815  0567  0872               	movf	clear_leds@count,w
  1816  0568  3186  2615  3185   	fcall	_turn_led_off
  1817  056B  3001               	movlw	1
  1818  056C  00F1               	movwf	??_clear_leds
  1819  056D  0871               	movf	??_clear_leds,w
  1820  056E  07F2               	addwf	clear_leds@count,f
  1821  056F  2D63               	goto	L4
  1822  0570                     __end_of_clear_leds:	
  1823                           
  1824                           	psect	text7
  1825  0615                     __ptext7:	
  1826 ;; *************** function _turn_led_off *****************
  1827 ;; Defined at:
  1828 ;;		line 318 in file "blinky.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;  led             1    wreg     unsigned char 
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;  led             1    0[COMMON] unsigned char 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg, status,2, status,0
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1843 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1845 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1846 ;;Total ram usage:        1 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_do_run
  1852 ;;		_clear_leds
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           
  1857                           ;psect for function _turn_led_off
  1858  0615                     _turn_led_off:	
  1859                           
  1860                           ;incstack = 0
  1861                           ; Regs used in _turn_led_off: [wreg+status,2+status,0]
  1862                           ;turn_led_off@led stored from wreg
  1863  0615  00F0               	movwf	turn_led_off@led
  1864                           
  1865                           ;blinky.c: 320: if (led == 1)
  1866  0616  0370               	decf	turn_led_off@led,w
  1867  0617  1D03               	btfss	3,2
  1868  0618  2E1C               	goto	l835
  1869                           
  1870                           ;blinky.c: 321: {
  1871                           ;blinky.c: 322: LATCbits.LATC0 = 0;
  1872  0619  0022               	movlb	2	; select bank2
  1873  061A  100E               	bcf	14,0	;volatile
  1874                           
  1875                           ;blinky.c: 323: }
  1876  061B  0008               	return
  1877  061C                     l835:	
  1878                           
  1879                           ;blinky.c: 324: else if (led == 2)
  1880  061C  3002               	movlw	2
  1881  061D  0670               	xorwf	turn_led_off@led,w
  1882  061E  1D03               	btfss	3,2
  1883  061F  2E23               	goto	l839
  1884                           
  1885                           ;blinky.c: 325: {
  1886                           ;blinky.c: 326: LATCbits.LATC1 = 0;
  1887  0620  0022               	movlb	2	; select bank2
  1888  0621  108E               	bcf	14,1	;volatile
  1889                           
  1890                           ;blinky.c: 327: }
  1891  0622  0008               	return
  1892  0623                     l839:	
  1893                           
  1894                           ;blinky.c: 328: else if (led == 3)
  1895  0623  3003               	movlw	3
  1896  0624  0670               	xorwf	turn_led_off@led,w
  1897  0625  1D03               	btfss	3,2
  1898  0626  2E2A               	goto	l843
  1899                           
  1900                           ;blinky.c: 329: {
  1901                           ;blinky.c: 330: LATCbits.LATC2 = 0;
  1902  0627  0022               	movlb	2	; select bank2
  1903  0628  110E               	bcf	14,2	;volatile
  1904                           
  1905                           ;blinky.c: 331: }
  1906  0629  0008               	return
  1907  062A                     l843:	
  1908                           
  1909                           ;blinky.c: 332: else if (led == 4)
  1910  062A  3004               	movlw	4
  1911  062B  0670               	xorwf	turn_led_off@led,w
  1912  062C  1D03               	btfss	3,2
  1913  062D  2E31               	goto	l847
  1914                           
  1915                           ;blinky.c: 333: {
  1916                           ;blinky.c: 334: LATCbits.LATC3 = 0;
  1917  062E  0022               	movlb	2	; select bank2
  1918  062F  118E               	bcf	14,3	;volatile
  1919                           
  1920                           ;blinky.c: 335: }
  1921  0630  0008               	return
  1922  0631                     l847:	
  1923                           
  1924                           ;blinky.c: 336: else if (led == 5)
  1925  0631  3005               	movlw	5
  1926  0632  0670               	xorwf	turn_led_off@led,w
  1927  0633  1D03               	btfss	3,2
  1928  0634  2E38               	goto	l851
  1929                           
  1930                           ;blinky.c: 337: {
  1931                           ;blinky.c: 338: LATCbits.LATC4 = 0;
  1932  0635  0022               	movlb	2	; select bank2
  1933  0636  120E               	bcf	14,4	;volatile
  1934                           
  1935                           ;blinky.c: 339: }
  1936  0637  0008               	return
  1937  0638                     l851:	
  1938                           
  1939                           ;blinky.c: 340: else if (led == 6)
  1940  0638  3006               	movlw	6
  1941  0639  0670               	xorwf	turn_led_off@led,w
  1942  063A  1D03               	btfss	3,2
  1943  063B  2E3F               	goto	l855
  1944                           
  1945                           ;blinky.c: 341: {
  1946                           ;blinky.c: 342: LATCbits.LATC5 = 0;
  1947  063C  0022               	movlb	2	; select bank2
  1948  063D  128E               	bcf	14,5	;volatile
  1949                           
  1950                           ;blinky.c: 343: }
  1951  063E  0008               	return
  1952  063F                     l855:	
  1953                           
  1954                           ;blinky.c: 344: else if (led == 7)
  1955  063F  3007               	movlw	7
  1956  0640  0670               	xorwf	turn_led_off@led,w
  1957  0641  1D03               	btfss	3,2
  1958  0642  2E46               	goto	l859
  1959                           
  1960                           ;blinky.c: 345: {
  1961                           ;blinky.c: 346: LATCbits.LATC6 = 0;
  1962  0643  0022               	movlb	2	; select bank2
  1963  0644  130E               	bcf	14,6	;volatile
  1964                           
  1965                           ;blinky.c: 347: }
  1966  0645  0008               	return
  1967  0646                     l859:	
  1968                           
  1969                           ;blinky.c: 348: else if (led == 8)
  1970  0646  3008               	movlw	8
  1971  0647  0670               	xorwf	turn_led_off@led,w
  1972  0648  1D03               	btfss	3,2
  1973  0649  2E4D               	goto	l863
  1974                           
  1975                           ;blinky.c: 349: {
  1976                           ;blinky.c: 350: LATCbits.LATC7 = 0;
  1977  064A  0022               	movlb	2	; select bank2
  1978  064B  138E               	bcf	14,7	;volatile
  1979                           
  1980                           ;blinky.c: 351: }
  1981  064C  0008               	return
  1982  064D                     l863:	
  1983                           
  1984                           ;blinky.c: 352: else if (led == 9)
  1985  064D  3009               	movlw	9
  1986  064E  0670               	xorwf	turn_led_off@led,w
  1987  064F  1D03               	btfss	3,2
  1988  0650  2E54               	goto	l867
  1989                           
  1990                           ;blinky.c: 353: {
  1991                           ;blinky.c: 354: LATBbits.LATB7 = 0;
  1992  0651  0022               	movlb	2	; select bank2
  1993  0652  138D               	bcf	13,7	;volatile
  1994                           
  1995                           ;blinky.c: 355: }
  1996  0653  0008               	return
  1997  0654                     l867:	
  1998                           
  1999                           ;blinky.c: 356: else if (led == 10)
  2000  0654  300A               	movlw	10
  2001  0655  0670               	xorwf	turn_led_off@led,w
  2002  0656  1D03               	btfss	3,2
  2003  0657  0008               	return
  2004                           
  2005                           ;blinky.c: 357: {
  2006                           ;blinky.c: 358: LATBbits.LATB6 = 0;
  2007  0658  0022               	movlb	2	; select bank2
  2008  0659  130D               	bcf	13,6	;volatile
  2009  065A  0008               	return
  2010  065B                     __end_of_turn_led_off:	
  2011                           
  2012                           	psect	text8
  2013  0552                     __ptext8:	
  2014 ;; *************** function _delay_ms *****************
  2015 ;; Defined at:
  2016 ;;		line 251 in file "blinky.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  milliseconds    2    0[COMMON] unsigned int 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;		None
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, status,2, status,0
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2030 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2033 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2034 ;;Total ram usage:        2 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; This function calls:
  2037 ;;		Nothing
  2038 ;; This function is called by:
  2039 ;;		_main
  2040 ;;		_blink_score
  2041 ;;		_do_run
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           
  2046                           ;psect for function _delay_ms
  2047  0552                     _delay_ms:	
  2048  0552                     l939:	
  2049                           ;blinky.c: 253: while(milliseconds > 0)
  2050                           
  2051                           ;incstack = 0
  2052                           ; Regs used in _delay_ms: [wreg+status,2+status,0]
  2053                           
  2054  0552  0870               	movf	delay_ms@milliseconds,w
  2055  0553  0471               	iorwf	delay_ms@milliseconds+1,w
  2056  0554  1903               	btfsc	3,2
  2057  0555  0008               	return
  2058                           
  2059                           ;blinky.c: 254: {
  2060                           ;blinky.c: 255: _delay((unsigned long)((1)*(500000/4000.0)));
  2061  0556  3029               	movlw	41
  2062  0557                     u1057:	
  2063  0557  0B89               	decfsz	9,f
  2064  0558  2D57               	goto	u1057
  2065  0559  3200               	nop2
  2066                           
  2067                           ;blinky.c: 256: milliseconds--;
  2068  055A  3001               	movlw	1
  2069  055B  02F0               	subwf	delay_ms@milliseconds,f
  2070  055C  3000               	movlw	0
  2071  055D  3BF1               	subwfb	delay_ms@milliseconds+1,f
  2072  055E  2D52               	goto	l939
  2073  055F                     __end_of_delay_ms:	
  2074                           
  2075                           	psect	text9
  2076  0598                     __ptext9:	
  2077 ;; *************** function ___wmul *****************
  2078 ;; Defined at:
  2079 ;;		line 15 in file "E:\Programs\Microchip\xc8\sources\common\Umul16.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  multiplier      2    0[COMMON] unsigned int 
  2082 ;;  multiplicand    2    2[COMMON] unsigned int 
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;  product         2    4[COMMON] unsigned int 
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  2    0[COMMON] unsigned int 
  2087 ;; Registers used:
  2088 ;;		wreg, status,2, status,0
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 0/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2094 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2095 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2097 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2098 ;;Total ram usage:        6 bytes
  2099 ;; Hardware stack levels used:    1
  2100 ;; This function calls:
  2101 ;;		Nothing
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           
  2108                           ;psect for function ___wmul
  2109  0598                     ___wmul:	
  2110                           
  2111                           ;incstack = 0
  2112                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2113  0598  01F4               	clrf	___wmul@product
  2114  0599  01F5               	clrf	___wmul@product+1
  2115  059A                     l1005:	
  2116  059A  1C70               	btfss	___wmul@multiplier,0
  2117  059B  2DA0               	goto	l151
  2118  059C  0872               	movf	___wmul@multiplicand,w
  2119  059D  07F4               	addwf	___wmul@product,f
  2120  059E  0873               	movf	___wmul@multiplicand+1,w
  2121  059F  3DF5               	addwfc	___wmul@product+1,f
  2122  05A0                     l151:	
  2123  05A0  3001               	movlw	1
  2124  05A1                     u855:	
  2125  05A1  35F2               	lslf	___wmul@multiplicand,f
  2126  05A2  0DF3               	rlf	___wmul@multiplicand+1,f
  2127  05A3  0B89               	decfsz	9,f
  2128  05A4  2DA1               	goto	u855
  2129  05A5  3001               	movlw	1
  2130  05A6                     u865:	
  2131  05A6  36F1               	lsrf	___wmul@multiplier+1,f
  2132  05A7  0CF0               	rrf	___wmul@multiplier,f
  2133  05A8  0B89               	decfsz	9,f
  2134  05A9  2DA6               	goto	u865
  2135  05AA  0870               	movf	___wmul@multiplier,w
  2136  05AB  0471               	iorwf	___wmul@multiplier+1,w
  2137  05AC  1D03               	btfss	3,2
  2138  05AD  2D9A               	goto	l1005
  2139  05AE  0875               	movf	___wmul@product+1,w
  2140  05AF  00F1               	movwf	?___wmul+1
  2141  05B0  0874               	movf	___wmul@product,w
  2142  05B1  00F0               	movwf	?___wmul
  2143  05B2  0008               	return
  2144  05B3                     __end_of___wmul:	
  2145  007E                     btemp	set	126	;btemp
  2146  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80     16      16
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_blink_score
    _main->_do_run
    _do_run->_clear_leds
    _blink_score->_show_led_up_to
    _show_led_up_to->_clear_leds
    _clear_leds->_turn_led_off

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0    5270
                                              0 BANK0     16    16      0
                             ___wmul
                        _blink_score
                  _button_is_pressed
                         _clear_leds
                           _delay_ms
                             _do_run
                     _show_led_up_to
 ---------------------------------------------------------------------------------
 (1) _do_run                                               6     4      2    1570
                                              3 COMMON     6     4      2
                         _clear_leds
                           _delay_ms
                       _turn_led_off
                        _turn_led_on
 ---------------------------------------------------------------------------------
 (1) _button_is_pressed                                    1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _blink_score                                          3     3      0    1511
                                              6 COMMON     3     3      0
                         _clear_leds
                           _delay_ms
                     _show_led_up_to
 ---------------------------------------------------------------------------------
 (1) _show_led_up_to                                       3     3      0     578
                                              3 COMMON     3     3      0
                         _clear_leds
                        _turn_led_on
 ---------------------------------------------------------------------------------
 (2) _turn_led_on                                          1     1      0     220
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clear_leds                                           2     2      0     289
                                              1 COMMON     2     2      0
                       _turn_led_off
 ---------------------------------------------------------------------------------
 (3) _turn_led_off                                         1     1      0     220
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             2     0      2     553
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _blink_score
     _clear_leds
       _turn_led_off
     _delay_ms
     _show_led_up_to
       _clear_leds
         _turn_led_off
       _turn_led_on
   _button_is_pressed
   _clear_leds
     _turn_led_off
   _delay_ms
   _do_run
     _clear_leds
       _turn_led_off
     _delay_ms
     _turn_led_off
     _turn_led_on
   _show_led_up_to
     _clear_leds
       _turn_led_off
     _turn_led_on

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      10       5       20.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Feb 22 21:03:50 2017

               do_run@delay 0073                 do_run@count 0078                 __CFG_CP$OFF 0000  
                        l52 0750         ___wmul@multiplicand 0072                 __CFG_LVP$ON 0000  
    main@difficulty_timeout 0029                         l151 05A0                         l911 068C  
                       l903 067E                         l851 0638                         l843 062A  
                       l835 061C                         l915 0693                         l907 0685  
                       l933 058B                         l863 064D                         l855 063F  
                       l847 0631                         l839 0623                         l919 069A  
                       l939 0552                         l867 0654                         l859 0646  
                       l891 0669                         l955 0581                         l949 0579  
                       l973 05C6                         l895 0670                         l887 0662  
                       l899 0677                         l995 05EA                         u855 05A1  
                       u865 05A6                __CFG_BORV$LO 0000                         wreg 0009  
              __CFG_IESO$ON 0000                        l1001 0607                        l1005 059A  
                      l1111 0785                        l1103 0773                        l1121 07AF  
                      l1123 07DB                        l1107 077A                        l1117 0790  
                      l1061 06FA                        l1127 07E3                        l1055 06EC  
                      l1039 06B8                        l1091 0753                        l1067 06CE  
                      l1085 072E                        l1069 0708                        l1095 075B  
                      l1089 073A                        u1025 07AB                        u1034 07D5  
                      u1035 07D3                        u1057 0557                        _LATA 010C  
                      _LATB 010D                        _LATC 010E                __CFG_WRT$OFF 0000  
             __CFG_FCMEN$ON 0000                        _main 06A1                        btemp 007E  
             __CFG_BOREN$ON 0000                        start 0002               __CFG_MCLRE$ON 0000  
            turn_led_on@led 0070               __CFG_PLLEN$ON 0000                       ?_main 0070  
             __CFG_WDTE$OFF 0000                       _TRISB 008D                       _TRISC 008E  
               _turn_led_on 065B                       status 0003                       wtemp0 007E  
           __initialization 07FD                __end_of_main 07FD       __size_of_turn_led_off 0046  
            __CFG_LPBOR$OFF 0000                      ??_main 0020             turn_led_off@led 0070  
          blink_score@score 0077        __size_of_blink_score 0035           _button_is_pressed 0570  
        ?_button_is_pressed 0070            ??_show_led_up_to 0073                _turn_led_off 0615  
          __end_of_delay_ms 055F              __CFG_PWRTE$OFF 0000         ??_button_is_pressed 0070  
      delay_ms@milliseconds 0070                      ___wmul 0598              __CFG_STVREN$ON 0000  
                    _do_run 05B3   __end_of_button_is_pressed 0583     __end_of__initialization 07FD  
            __pcstackCOMMON 0070              main@difficulty 002F                  _clear_leds 055F  
                __pmaintext 06A1                     ?___wmul 0070             __CFG_PPS1WAY$ON 0000  
                   ?_do_run 0073             clear_leds@count 0072             __CFG_WDTCCS$SWC 0000  
              ?_turn_led_on 0070  __size_of_button_is_pressed 0013                   ?_delay_ms 0070  
   show_led_up_to@led_count 0074             __size_of___wmul 001B             __size_of_do_run 002D  
                   __ptext1 05B3                     __ptext2 0570                     __ptext3 05E0  
                   __ptext4 0583                     __ptext5 065B                     __ptext6 055F  
                   __ptext7 0615                     __ptext8 0552                     __ptext9 0598  
                ??_delay_ms 0072        end_of_initialization 07FD                 ?_clear_leds 0070  
             ??_blink_score 0076                   _PORTAbits 000C            __CFG_FOSC$INTOSC 0000  
   button_is_pressed@button 0070              __end_of___wmul 05B3              __end_of_do_run 05E0  
         main@response_time 002C         start_initialization 07FD         __end_of_blink_score 0615  
       __size_of_clear_leds 0011        __size_of_turn_led_on 0046                    ??___wmul 0074  
                  ??_do_run 0075     __size_of_show_led_up_to 0015                   ___latbits 0002  
             __pcstackBANK0 0020           __size_of_delay_ms 000D                 _blink_score 05E0  
            ___wmul@product 0074                    _LATBbits 010D                    _LATCbits 010E  
             ?_turn_led_off 0070                ??_clear_leds 0071        __CFG_WDTCPS$WDTCPS1F 0000  
                 do_run@dir 0076                   do_run@led 0077           ___wmul@multiplier 0070  
                 main@count 0027                   main@score 002E          __end_of_clear_leds 0570  
            ??_turn_led_off 0070              _show_led_up_to 0583                  _ANSELAbits 018C  
                  _delay_ms 0552               __size_of_main 015C        __CFG_WDTCWS$WDTCWSSW 0000  
    __end_of_show_led_up_to 0598                    main@fail 002B                blink_score@i 0078  
             ??_turn_led_on 0070           __CFG_CLKOUTEN$OFF 0000             ?_show_led_up_to 0070  
              ?_blink_score 0070        __end_of_turn_led_off 065B         show_led_up_to@count 0075  
       __end_of_turn_led_on 06A1  
