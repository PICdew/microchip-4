

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Sep 10 00:36:30 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     	;# 
    30  0001                     	;# 
    31  0002                     	;# 
    32  0003                     	;# 
    33  0004                     	;# 
    34  0005                     	;# 
    35  0006                     	;# 
    36  0007                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000D                     	;# 
    41  000E                     	;# 
    42  000E                     	;# 
    43  000F                     	;# 
    44  0010                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0013                     	;# 
    48  0014                     	;# 
    49  0015                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001C                     	;# 
    57  001D                     	;# 
    58  001E                     	;# 
    59  001F                     	;# 
    60  0081                     	;# 
    61  0085                     	;# 
    62  0086                     	;# 
    63  0087                     	;# 
    64  008C                     	;# 
    65  008D                     	;# 
    66  008E                     	;# 
    67  008F                     	;# 
    68  0090                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0093                     	;# 
    72  0093                     	;# 
    73  0094                     	;# 
    74  0095                     	;# 
    75  0095                     	;# 
    76  0096                     	;# 
    77  0096                     	;# 
    78  0097                     	;# 
    79  0098                     	;# 
    80  0099                     	;# 
    81  009A                     	;# 
    82  009B                     	;# 
    83  009E                     	;# 
    84  009F                     	;# 
    85  010C                     	;# 
    86  010C                     	;# 
    87  010D                     	;# 
    88  010E                     	;# 
    89  010F                     	;# 
    90  0115                     	;# 
    91  0116                     	;# 
    92  0118                     	;# 
    93  0119                     	;# 
    94  011A                     	;# 
    95  011B                     	;# 
    96  011E                     	;# 
    97  011F                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  019D                     	;# 
   101  019E                     	;# 
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  000E                     	;# 
   116  000F                     	;# 
   117  0010                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0014                     	;# 
   122  0015                     	;# 
   123  0015                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001C                     	;# 
   130  001D                     	;# 
   131  001E                     	;# 
   132  001F                     	;# 
   133  0081                     	;# 
   134  0085                     	;# 
   135  0086                     	;# 
   136  0087                     	;# 
   137  008C                     	;# 
   138  008D                     	;# 
   139  008E                     	;# 
   140  008F                     	;# 
   141  0090                     	;# 
   142  0092                     	;# 
   143  0093                     	;# 
   144  0093                     	;# 
   145  0093                     	;# 
   146  0094                     	;# 
   147  0095                     	;# 
   148  0095                     	;# 
   149  0096                     	;# 
   150  0096                     	;# 
   151  0097                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009A                     	;# 
   155  009B                     	;# 
   156  009E                     	;# 
   157  009F                     	;# 
   158  010C                     	;# 
   159  010C                     	;# 
   160  010D                     	;# 
   161  010E                     	;# 
   162  010F                     	;# 
   163  0115                     	;# 
   164  0116                     	;# 
   165  0118                     	;# 
   166  0119                     	;# 
   167  011A                     	;# 
   168  011B                     	;# 
   169  011E                     	;# 
   170  011F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173  019D                     	;# 
   174  019E                     	;# 
   175                           
   176                           	psect	idataCOMMON
   177  02C8                     __pidataCOMMON:	
   178                           
   179                           ;initializer for _offtime
   180  02C8  34FF               	retlw	255
   181                           
   182                           ;initializer for _ontime
   183  02C9  3402               	retlw	2
   184                           
   185                           ;initializer for _updown
   186  02CA  3401               	retlw	1
   187                           
   188                           	psect	idataBANK0
   189  02CB                     __pidataBANK0:	
   190                           
   191                           ;initializer for _cycle_state
   192  02CB  3401               	retlw	1
   193  0017                     _CCP1CONbits	set	23
   194  000B                     _INTCONbits	set	11
   195  000C                     _PIR1bits	set	12
   196  0005                     _PORTAbits	set	5
   197  0007                     _PORTC	set	7
   198  0010                     _T1CONbits	set	16
   199  0012                     _T2CONbits	set	18
   200  000F                     _TMR1H	set	15
   201  000E                     _TMR1L	set	14
   202  0011                     _TMR2	set	17
   203  0081                     _OPTION_REGbits	set	129
   204  008F                     _OSCCONbits	set	143
   205  008C                     _PIE1bits	set	140
   206  0092                     _PR2	set	146
   207  0085                     _TRISA	set	133
   208  0087                     _TRISC	set	135
   209  0095                     _WPUA	set	149
   210  011E                     _ANSEL	set	286
   211  011F                     _ANSELH	set	287
   212                           
   213                           ; #config settings
   214  0000                     
   215                           	psect	cinit
   216  0013                     start_initialization:	
   217  0013                     __initialization:	
   218                           
   219                           ; Clear objects allocated to COMMON
   220  0013  01F8               	clrf	__pbssCOMMON& (0+127)
   221  0014  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   222                           
   223                           ; Clear objects allocated to BANK0
   224  0015  1383               	bcf	3,7	;select IRP bank0
   225  0016  3020               	movlw	low __pbssBANK0
   226  0017  0084               	movwf	4
   227  0018  3052               	movlw	low (__pbssBANK0+50)
   228  0019  118A  22C0  118A   	fcall	clear_ram0
   229                           
   230                           ; Initialize objects allocated to BANK0
   231  001C  118A  22CB  118A   	fcall	__pidataBANK0	;fetch initializer
   232  001F  00E1               	movwf	__pdataBANK0& (0+127)
   233                           
   234                           ; Initialize objects allocated to COMMON
   235  0020  118A  22C8  118A   	fcall	__pidataCOMMON	;fetch initializer
   236  0023  00F5               	movwf	__pdataCOMMON& (0+127)
   237  0024  118A  22C9  118A   	fcall	__pidataCOMMON+1	;fetch initializer
   238  0027  00F6               	movwf	(__pdataCOMMON+1)& (0+127)
   239  0028  118A  22CA         	fcall	__pidataCOMMON+2	;fetch initializer
   240  002A  00F7               	movwf	(__pdataCOMMON+2)& (0+127)
   241  002B                     end_of_initialization:	
   242                           ;End of C runtime variable initialization code
   243                           
   244  002B                     __end_of__initialization:	
   245  002B  0183               	clrf	3
   246  002C  118A  282E         	ljmp	_main	;jump to C main() function
   247                           
   248                           	psect	bssCOMMON
   249  0078                     __pbssCOMMON:	
   250  0078                     _LEDOnMask:	
   251  0078                     	ds	1
   252  0079                     _onoff:	
   253  0079                     	ds	1
   254                           
   255                           	psect	dataCOMMON
   256  0075                     __pdataCOMMON:	
   257  0075                     _offtime:	
   258  0075                     	ds	1
   259  0076                     _ontime:	
   260  0076                     	ds	1
   261  0077                     _updown:	
   262  0077                     	ds	1
   263                           
   264                           	psect	bssBANK0
   265  0020                     __pbssBANK0:	
   266  0020                     _LED0Count:	
   267  0020                     	ds	1
   268  0021                     _LED1Count:	
   269  0021                     	ds	1
   270  0022                     _LED2Count:	
   271  0022                     	ds	1
   272  0023                     _LED3Count:	
   273  0023                     	ds	1
   274  0024                     _LEDOnMaskNext:	
   275  0024                     	ds	1
   276  0025                     _doof:	
   277  0025                     	ds	1
   278  0026                     _t1IntCount:	
   279  0026                     	ds	1
   280  0027                     _updateLEDs:	
   281  0027                     	ds	1
   282  0028                     _led0:	
   283  0028                     	ds	6
   284  002E                     _led1:	
   285  002E                     	ds	6
   286  0034                     _led2:	
   287  0034                     	ds	6
   288  003A                     _led3:	
   289  003A                     	ds	6
   290  0040                     _led4:	
   291  0040                     	ds	6
   292  0046                     _phase0:	
   293  0046                     	ds	3
   294  0049                     _phase1:	
   295  0049                     	ds	3
   296  004C                     _phase2:	
   297  004C                     	ds	3
   298  004F                     _phase3:	
   299  004F                     	ds	3
   300                           
   301                           	psect	dataBANK0
   302  0061                     __pdataBANK0:	
   303  0061                     _cycle_state:	
   304  0061                     	ds	1
   305                           
   306                           	psect	clrtext
   307  02C0                     clear_ram0:	
   308                           ;	Called with FSR containing the base address, and
   309                           ;	W with the last address+1
   310                           
   311  02C0  0064               	clrwdt	;clear the watchdog before getting into this loop
   312  02C1                     clrloop0:	
   313  02C1  0180               	clrf	0	;clear RAM location pointed to by FSR
   314  02C2  0A84               	incf	4,f	;increment pointer
   315  02C3  0604               	xorwf	4,w	;XOR with final address
   316  02C4  1903               	btfsc	3,2	;have we reached the end yet?
   317  02C5  3400               	retlw	0	;all done for this memory range, return
   318  02C6  0604               	xorwf	4,w	;XOR again to restore value
   319  02C7  2AC1               	goto	clrloop0	;do the next byte
   320                           
   321                           	psect	cstackCOMMON
   322  0070                     __pcstackCOMMON:	
   323  0070                     ?_setup:	
   324  0070                     ?_t1setup:	
   325                           ; 0 bytes @ 0x0
   326                           
   327  0070                     ?_t2setup:	
   328                           ; 0 bytes @ 0x0
   329                           
   330  0070                     ?_LEDSetup:	
   331                           ; 0 bytes @ 0x0
   332                           
   333  0070                     ?_turnOnLED:	
   334                           ; 0 bytes @ 0x0
   335                           
   336  0070                     ?_ISR:	
   337                           ; 0 bytes @ 0x0
   338                           
   339  0070                     ??_ISR:	
   340                           ; 0 bytes @ 0x0
   341                           
   342  0070                     ?_phaseSetup:	
   343                           ; 0 bytes @ 0x0
   344                           
   345  0070                     ?_updateLED:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_main:	
   349                           ; 1 bytes @ 0x0
   350                           
   351                           
   352                           ; 2 bytes @ 0x0
   353  0070                     	ds	5
   354                           
   355                           	psect	cstackBANK0
   356  0052                     __pcstackBANK0:	
   357  0052                     ??_setup:	
   358  0052                     ??_t1setup:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0052                     ??_t2setup:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  0052                     ??_turnOnLED:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  0052                     ?_setupPhase:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  0052                     ?_setupLED:	
   371                           ; 0 bytes @ 0x0
   372                           
   373  0052                     ?___bmul:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  0052                     ?___lbmod:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0052                     setupLED@LEDMask:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0052                     setupPhase@blinkDivisor:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0052                     ___bmul@multiplicand:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0052                     ___lbmod@divisor:	
   389                           ; 1 bytes @ 0x0
   390                           
   391                           
   392                           ; 1 bytes @ 0x0
   393  0052                     	ds	1
   394  0053                     ??___bmul:	
   395  0053                     ??___lbmod:	
   396                           ; 0 bytes @ 0x1
   397                           
   398  0053                     setupLED@initialCount:	
   399                           ; 0 bytes @ 0x1
   400                           
   401  0053                     setupPhase@blinkCountThreshold:	
   402                           ; 1 bytes @ 0x1
   403                           
   404  0053                     turnOnLED@led:	
   405                           ; 1 bytes @ 0x1
   406                           
   407                           
   408                           ; 1 bytes @ 0x1
   409  0053                     	ds	1
   410  0054                     setupLED@initialPhase:	
   411  0054                     setupPhase@nextPhase:	
   412                           ; 1 bytes @ 0x2
   413                           
   414  0054                     ___bmul@product:	
   415                           ; 1 bytes @ 0x2
   416                           
   417                           
   418                           ; 1 bytes @ 0x2
   419  0054                     	ds	1
   420  0055                     ??_setupPhase:	
   421  0055                     ??_setupLED:	
   422                           ; 0 bytes @ 0x3
   423                           
   424  0055                     ___bmul@multiplier:	
   425                           ; 0 bytes @ 0x3
   426                           
   427                           
   428                           ; 1 bytes @ 0x3
   429  0055                     	ds	1
   430  0056                     setupLED@led:	
   431  0056                     setupPhase@phase:	
   432                           ; 1 bytes @ 0x4
   433                           
   434  0056                     ___lbmod@dividend:	
   435                           ; 1 bytes @ 0x4
   436                           
   437                           
   438                           ; 1 bytes @ 0x4
   439  0056                     	ds	1
   440  0057                     ??_phaseSetup:	
   441  0057                     ??_LEDSetup:	
   442                           ; 0 bytes @ 0x5
   443                           
   444  0057                     ___lbmod@counter:	
   445                           ; 0 bytes @ 0x5
   446                           
   447                           
   448                           ; 1 bytes @ 0x5
   449  0057                     	ds	1
   450  0058                     ___lbmod@rem:	
   451                           
   452                           ; 1 bytes @ 0x6
   453  0058                     	ds	1
   454  0059                     ??_updateLED:	
   455                           
   456                           ; 0 bytes @ 0x7
   457  0059                     	ds	1
   458  005A                     LEDSetup@initialPhase:	
   459                           
   460                           ; 1 bytes @ 0x8
   461  005A                     	ds	1
   462  005B                     updateLED@retval:	
   463                           
   464                           ; 1 bytes @ 0x9
   465  005B                     	ds	1
   466  005C                     updateLED@led:	
   467                           
   468                           ; 1 bytes @ 0xA
   469  005C                     	ds	1
   470  005D                     ??_main:	
   471                           
   472                           ; 0 bytes @ 0xB
   473  005D                     	ds	1
   474  005E                     main@i:	
   475                           
   476                           ; 2 bytes @ 0xC
   477  005E                     	ds	2
   478  0060                     main@initialPhase:	
   479                           
   480                           ; 1 bytes @ 0xE
   481  0060                     	ds	1
   482                           
   483                           	psect	maintext
   484  002E                     __pmaintext:	
   485 ;;
   486 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   487 ;;
   488 ;; *************** function _main *****************
   489 ;; Defined at:
   490 ;;		line 34 in file "toothbrush_counter.c"
   491 ;; Parameters:    Size  Location     Type
   492 ;;		None
   493 ;; Auto vars:     Size  Location     Type
   494 ;;  i               2   12[BANK0 ] unsigned int 
   495 ;;  initialPhase    1   14[BANK0 ] PTR struct Phase
   496 ;;		 -> phase3(3), 
   497 ;; Return value:  Size  Location     Type
   498 ;;                  2  104[COMMON] int 
   499 ;; Registers used:
   500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   501 ;; Tracked objects:
   502 ;;		On entry : 17F/0
   503 ;;		On exit  : 0/0
   504 ;;		Unchanged: 0/0
   505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   506 ;;      Params:         0       0       0       0
   507 ;;      Locals:         0       3       0       0
   508 ;;      Temps:          0       1       0       0
   509 ;;      Totals:         0       4       0       0
   510 ;;Total ram usage:        4 bytes
   511 ;; Hardware stack levels required when called:    3
   512 ;; This function calls:
   513 ;;		_LEDSetup
   514 ;;		_phaseSetup
   515 ;;		_setup
   516 ;;		_t1setup
   517 ;;		_t2setup
   518 ;;		_turnOnLED
   519 ;;		_updateLED
   520 ;; This function is called by:
   521 ;;		Startup code after reset
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525                           
   526                           ;psect for function _main
   527  002E                     _main:	
   528                           
   529                           ;toothbrush_counter.c: 37: unsigned int i = 0;
   530                           
   531                           ;incstack = 0
   532                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   533  002E  1283               	bcf	3,5	;RP0=0, select bank0
   534  002F  1303               	bcf	3,6	;RP1=0, select bank0
   535  0030  01DE               	clrf	main@i
   536  0031  01DF               	clrf	main@i+1
   537                           
   538                           ;toothbrush_counter.c: 38: setup();
   539  0032  118A  2286  118A   	fcall	_setup
   540                           
   541                           ;toothbrush_counter.c: 39: t1setup();
   542  0035  118A  22AF  118A   	fcall	_t1setup
   543                           
   544                           ;toothbrush_counter.c: 40: t2setup();
   545  0038  118A  226F  118A   	fcall	_t2setup
   546                           
   547                           ;toothbrush_counter.c: 41: Phase* initialPhase = phaseSetup();
   548  003B  118A  21B4  118A   	fcall	_phaseSetup
   549  003E  1283               	bcf	3,5	;RP0=0, select bank0
   550  003F  1303               	bcf	3,6	;RP1=0, select bank0
   551  0040  00DD               	movwf	??_main
   552  0041  085D               	movf	??_main,w
   553  0042  00E0               	movwf	main@initialPhase
   554                           
   555                           ;toothbrush_counter.c: 42: LEDSetup(initialPhase);
   556  0043  0860               	movf	main@initialPhase,w
   557  0044  118A  210D  118A   	fcall	_LEDSetup
   558  0047                     l1176:	
   559                           ;toothbrush_counter.c: 45: while (1)
   560                           
   561                           
   562                           ;toothbrush_counter.c: 46: {
   563                           ;toothbrush_counter.c: 47: if (updateLEDs)
   564  0047  1283               	bcf	3,5	;RP0=0, select bank0
   565  0048  1303               	bcf	3,6	;RP1=0, select bank0
   566  0049  0827               	movf	_updateLEDs,w	;volatile
   567  004A  1903               	btfsc	3,2
   568  004B  287B               	goto	l1192
   569                           
   570                           ;toothbrush_counter.c: 48: {
   571                           ;toothbrush_counter.c: 49: LEDOnMaskNext = 0x00;
   572  004C  01A4               	clrf	_LEDOnMaskNext	;volatile
   573                           
   574                           ;toothbrush_counter.c: 50: LEDOnMaskNext |= updateLED(&led4);
   575  004D  3040               	movlw	_led4& (0+255)
   576  004E  118A  20B1  118A   	fcall	_updateLED
   577  0051  1283               	bcf	3,5	;RP0=0, select bank0
   578  0052  1303               	bcf	3,6	;RP1=0, select bank0
   579  0053  00DD               	movwf	??_main
   580  0054  085D               	movf	??_main,w
   581  0055  04A4               	iorwf	_LEDOnMaskNext,f	;volatile
   582                           
   583                           ;toothbrush_counter.c: 51: LEDOnMaskNext |= updateLED(&led3);
   584  0056  303A               	movlw	_led3& (0+255)
   585  0057  118A  20B1  118A   	fcall	_updateLED
   586  005A  1283               	bcf	3,5	;RP0=0, select bank0
   587  005B  1303               	bcf	3,6	;RP1=0, select bank0
   588  005C  00DD               	movwf	??_main
   589  005D  085D               	movf	??_main,w
   590  005E  04A4               	iorwf	_LEDOnMaskNext,f	;volatile
   591                           
   592                           ;toothbrush_counter.c: 52: LEDOnMaskNext |= updateLED(&led2);
   593  005F  3034               	movlw	_led2& (0+255)
   594  0060  118A  20B1  118A   	fcall	_updateLED
   595  0063  1283               	bcf	3,5	;RP0=0, select bank0
   596  0064  1303               	bcf	3,6	;RP1=0, select bank0
   597  0065  00DD               	movwf	??_main
   598  0066  085D               	movf	??_main,w
   599  0067  04A4               	iorwf	_LEDOnMaskNext,f	;volatile
   600                           
   601                           ;toothbrush_counter.c: 53: LEDOnMaskNext |= updateLED(&led1);
   602  0068  302E               	movlw	_led1& (0+255)
   603  0069  118A  20B1  118A   	fcall	_updateLED
   604  006C  1283               	bcf	3,5	;RP0=0, select bank0
   605  006D  1303               	bcf	3,6	;RP1=0, select bank0
   606  006E  00DD               	movwf	??_main
   607  006F  085D               	movf	??_main,w
   608  0070  04A4               	iorwf	_LEDOnMaskNext,f	;volatile
   609                           
   610                           ;toothbrush_counter.c: 54: LEDOnMaskNext |= updateLED(&led0);
   611  0071  3028               	movlw	_led0& (0+255)
   612  0072  118A  20B1  118A   	fcall	_updateLED
   613  0075  1283               	bcf	3,5	;RP0=0, select bank0
   614  0076  1303               	bcf	3,6	;RP1=0, select bank0
   615  0077  00DD               	movwf	??_main
   616  0078  085D               	movf	??_main,w
   617  0079  04A4               	iorwf	_LEDOnMaskNext,f	;volatile
   618                           
   619                           ;toothbrush_counter.c: 55: updateLEDs = 0;
   620  007A  01A7               	clrf	_updateLEDs	;volatile
   621  007B                     l1192:	
   622                           
   623                           ;toothbrush_counter.c: 60: }
   624                           ;toothbrush_counter.c: 61: if (!PORTAbits.RA0 && led0.state == LEDState_Idle)
   625  007B  1805               	btfsc	5,0	;volatile
   626  007C  2884               	goto	l1198
   627  007D  08AB               	movf	_led0+3,f
   628  007E  1D03               	skipz
   629  007F  2884               	goto	l1198
   630                           
   631                           ;toothbrush_counter.c: 62: turnOnLED(&led0);
   632  0080  3028               	movlw	_led0& (0+255)
   633  0081  118A  223A  118A   	fcall	_turnOnLED
   634  0084                     l1198:	
   635                           
   636                           ;toothbrush_counter.c: 64: if (!PORTAbits.RA1 && led1.state == LEDState_Idle)
   637  0084  1283               	bcf	3,5	;RP0=0, select bank0
   638  0085  1303               	bcf	3,6	;RP1=0, select bank0
   639  0086  1885               	btfsc	5,1	;volatile
   640  0087  288F               	goto	l1204
   641  0088  08B1               	movf	_led1+3,f
   642  0089  1D03               	skipz
   643  008A  288F               	goto	l1204
   644                           
   645                           ;toothbrush_counter.c: 65: turnOnLED(&led1);
   646  008B  302E               	movlw	_led1& (0+255)
   647  008C  118A  223A  118A   	fcall	_turnOnLED
   648  008F                     l1204:	
   649                           
   650                           ;toothbrush_counter.c: 67: if (!PORTAbits.RA2 && led2.state == LEDState_Idle)
   651  008F  1283               	bcf	3,5	;RP0=0, select bank0
   652  0090  1303               	bcf	3,6	;RP1=0, select bank0
   653  0091  1905               	btfsc	5,2	;volatile
   654  0092  289A               	goto	l1210
   655  0093  08B7               	movf	_led2+3,f
   656  0094  1D03               	skipz
   657  0095  289A               	goto	l1210
   658                           
   659                           ;toothbrush_counter.c: 68: turnOnLED(&led2);
   660  0096  3034               	movlw	_led2& (0+255)
   661  0097  118A  223A  118A   	fcall	_turnOnLED
   662  009A                     l1210:	
   663                           
   664                           ;toothbrush_counter.c: 70: if (!PORTAbits.RA4 && led3.state == LEDState_Idle)
   665  009A  1283               	bcf	3,5	;RP0=0, select bank0
   666  009B  1303               	bcf	3,6	;RP1=0, select bank0
   667  009C  1A05               	btfsc	5,4	;volatile
   668  009D  28A5               	goto	l1216
   669  009E  08BD               	movf	_led3+3,f
   670  009F  1D03               	skipz
   671  00A0  28A5               	goto	l1216
   672                           
   673                           ;toothbrush_counter.c: 71: turnOnLED(&led3);
   674  00A1  303A               	movlw	_led3& (0+255)
   675  00A2  118A  223A  118A   	fcall	_turnOnLED
   676  00A5                     l1216:	
   677                           
   678                           ;toothbrush_counter.c: 73: if (!PORTAbits.RA5 && led4.state == LEDState_Idle)
   679  00A5  1283               	bcf	3,5	;RP0=0, select bank0
   680  00A6  1303               	bcf	3,6	;RP1=0, select bank0
   681  00A7  1A85               	btfsc	5,5	;volatile
   682  00A8  2847               	goto	l1176
   683  00A9  08C3               	movf	_led4+3,f
   684  00AA  1D03               	skipz
   685  00AB  2847               	goto	l1176
   686                           
   687                           ;toothbrush_counter.c: 74: turnOnLED(&led4);
   688  00AC  3040               	movlw	_led4& (0+255)
   689  00AD  118A  223A  118A   	fcall	_turnOnLED
   690  00B0  2847               	goto	l1176
   691  00B1                     __end_of_main:	
   692                           ;toothbrush_counter.c: 93: }
   693                           ;toothbrush_counter.c: 94: return 0;
   694                           ;	Return value of _main is never used
   695                           
   696                           
   697                           	psect	text1
   698  00B1                     __ptext1:	
   699 ;; *************** function _updateLED *****************
   700 ;; Defined at:
   701 ;;		line 41 in file "led.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;  led             1    wreg     PTR struct LED
   704 ;;		 -> led0(6), led1(6), led2(6), led3(6), 
   705 ;;		 -> led4(6), 
   706 ;; Auto vars:     Size  Location     Type
   707 ;;  led             1   10[BANK0 ] PTR struct LED
   708 ;;		 -> led0(6), led1(6), led2(6), led3(6), 
   709 ;;		 -> led4(6), 
   710 ;;  retval          1    9[BANK0 ] unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      unsigned char 
   713 ;; Registers used:
   714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   720 ;;      Params:         0       0       0       0
   721 ;;      Locals:         0       2       0       0
   722 ;;      Temps:          0       2       0       0
   723 ;;      Totals:         0       4       0       0
   724 ;;Total ram usage:        4 bytes
   725 ;; Hardware stack levels used:    1
   726 ;; Hardware stack levels required when called:    2
   727 ;; This function calls:
   728 ;;		___bmul
   729 ;;		___lbmod
   730 ;; This function is called by:
   731 ;;		_main
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           
   736                           ;psect for function _updateLED
   737  00B1                     _updateLED:	
   738                           
   739                           ;incstack = 0
   740                           ; Regs used in _updateLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   741                           ;updateLED@led stored from wreg
   742  00B1  1283               	bcf	3,5	;RP0=0, select bank0
   743  00B2  1303               	bcf	3,6	;RP1=0, select bank0
   744  00B3  00DC               	movwf	updateLED@led
   745                           
   746                           ;led.c: 43: char retval = 0;
   747  00B4  01DB               	clrf	updateLED@retval
   748                           
   749                           ;led.c: 45: if (led->state == LEDState_Counting)
   750  00B5  085C               	movf	updateLED@led,w
   751  00B6  3E03               	addlw	3
   752  00B7  0084               	movwf	4
   753  00B8  1383               	bcf	3,7	;select IRP bank0
   754  00B9  0800               	movf	0,w
   755  00BA  3A01               	xorlw	1
   756  00BB  1D03               	skipz
   757  00BC  2903               	goto	l1158
   758                           
   759                           ;led.c: 46: {
   760                           ;led.c: 49: if (led->count-- % led->currentPhase->blinkDivisor == 0)
   761  00BD  085C               	movf	updateLED@led,w
   762  00BE  3E04               	addlw	4
   763  00BF  0084               	movwf	4
   764  00C0  0800               	movf	0,w
   765  00C1  0084               	movwf	4
   766  00C2  0800               	movf	0,w
   767  00C3  00D9               	movwf	??_updateLED
   768  00C4  0859               	movf	??_updateLED,w
   769  00C5  00D2               	movwf	___lbmod@divisor
   770  00C6  0A5C               	incf	updateLED@led,w
   771  00C7  0084               	movwf	4
   772  00C8  30FF               	movlw	-1
   773  00C9  0780               	addwf	0,f
   774  00CA  3001               	movlw	1
   775  00CB  0700               	addwf	0,w
   776  00CC  118A  21F5  118A   	fcall	___lbmod
   777  00CF  3800               	iorlw	0
   778  00D0  1D03               	skipz
   779  00D1  28D6               	goto	l1150
   780                           
   781                           ;led.c: 50: {
   782                           ;led.c: 51: retval = 1;
   783  00D2  1283               	bcf	3,5	;RP0=0, select bank0
   784  00D3  1303               	bcf	3,6	;RP1=0, select bank0
   785  00D4  01DB               	clrf	updateLED@retval
   786  00D5  0ADB               	incf	updateLED@retval,f
   787  00D6                     l1150:	
   788                           
   789                           ;led.c: 52: }
   790                           ;led.c: 53: if (led->count <= led->currentPhase->blinkCountThreshold)
   791  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   792  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   793  00D8  0A5C               	incf	updateLED@led,w
   794  00D9  0084               	movwf	4
   795  00DA  1383               	bcf	3,7	;select IRP bank0
   796  00DB  0800               	movf	0,w
   797  00DC  00D9               	movwf	??_updateLED
   798  00DD  085C               	movf	updateLED@led,w
   799  00DE  3E04               	addlw	4
   800  00DF  0084               	movwf	4
   801  00E0  0A00               	incf	0,w
   802  00E1  0084               	movwf	4
   803  00E2  0800               	movf	0,w
   804  00E3  00DA               	movwf	??_updateLED+1
   805  00E4  0859               	movf	??_updateLED,w
   806  00E5  025A               	subwf	??_updateLED+1,w
   807  00E6  1C03               	skipc
   808  00E7  2903               	goto	l1158
   809                           
   810                           ;led.c: 54: {
   811                           ;led.c: 55: if (led->currentPhase->nextPhase == (0))
   812  00E8  085C               	movf	updateLED@led,w
   813  00E9  3E04               	addlw	4
   814  00EA  0084               	movwf	4
   815  00EB  0800               	movf	0,w
   816  00EC  3E02               	addlw	2
   817  00ED  0084               	movwf	4
   818  00EE  0880               	movf	0,f
   819  00EF  1D03               	skipz
   820  00F0  28F6               	goto	l1156
   821                           
   822                           ;led.c: 56: {
   823                           ;led.c: 57: led->state = LEDState_Idle;
   824  00F1  085C               	movf	updateLED@led,w
   825  00F2  3E03               	addlw	3
   826  00F3  0084               	movwf	4
   827  00F4  0180               	clrf	0
   828                           
   829                           ;led.c: 58: }
   830  00F5  2903               	goto	l1158
   831  00F6                     l1156:	
   832                           
   833                           ;led.c: 59: else
   834                           ;led.c: 60: {
   835                           ;led.c: 61: led->currentPhase = led->currentPhase->nextPhase;
   836  00F6  085C               	movf	updateLED@led,w
   837  00F7  3E04               	addlw	4
   838  00F8  0084               	movwf	4
   839  00F9  0800               	movf	0,w
   840  00FA  3E02               	addlw	2
   841  00FB  0084               	movwf	4
   842  00FC  0800               	movf	0,w
   843  00FD  00D9               	movwf	??_updateLED
   844  00FE  085C               	movf	updateLED@led,w
   845  00FF  3E04               	addlw	4
   846  0100  0084               	movwf	4
   847  0101  0859               	movf	??_updateLED,w
   848  0102  0080               	movwf	0
   849  0103                     l1158:	
   850                           
   851                           ;led.c: 62: }
   852                           ;led.c: 63: }
   853                           ;led.c: 64: }
   854                           ;led.c: 65: return retval * led->LEDMask;
   855  0103  085B               	movf	updateLED@retval,w
   856  0104  00D9               	movwf	??_updateLED
   857  0105  0859               	movf	??_updateLED,w
   858  0106  00D2               	movwf	___bmul@multiplicand
   859  0107  085C               	movf	updateLED@led,w
   860  0108  0084               	movwf	4
   861  0109  0800               	movf	0,w
   862  010A  118A  229C         	fcall	___bmul
   863  010C  0008               	return
   864  010D                     __end_of_updateLED:	
   865                           
   866                           	psect	text2
   867  01F5                     __ptext2:	
   868 ;; *************** function ___lbmod *****************
   869 ;; Defined at:
   870 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbmod.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;  dividend        1    wreg     unsigned char 
   873 ;;  divisor         1    0[BANK0 ] unsigned char 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  dividend        1    4[BANK0 ] unsigned char 
   876 ;;  rem             1    6[BANK0 ] unsigned char 
   877 ;;  counter         1    5[BANK0 ] unsigned char 
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      unsigned char 
   880 ;; Registers used:
   881 ;;		wreg, status,2, status,0
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   887 ;;      Params:         0       1       0       0
   888 ;;      Locals:         0       3       0       0
   889 ;;      Temps:          0       3       0       0
   890 ;;      Totals:         0       7       0       0
   891 ;;Total ram usage:        7 bytes
   892 ;; Hardware stack levels used:    1
   893 ;; Hardware stack levels required when called:    1
   894 ;; This function calls:
   895 ;;		Nothing
   896 ;; This function is called by:
   897 ;;		_updateLED
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           
   902                           ;psect for function ___lbmod
   903  01F5                     ___lbmod:	
   904                           
   905                           ;incstack = 0
   906                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
   907                           ;___lbmod@dividend stored from wreg
   908  01F5  1283               	bcf	3,5	;RP0=0, select bank0
   909  01F6  1303               	bcf	3,6	;RP1=0, select bank0
   910  01F7  00D6               	movwf	___lbmod@dividend
   911  01F8  3008               	movlw	8
   912  01F9  00D3               	movwf	??___lbmod
   913  01FA  0853               	movf	??___lbmod,w
   914  01FB  00D7               	movwf	___lbmod@counter
   915  01FC  01D8               	clrf	___lbmod@rem
   916  01FD                     l1072:	
   917  01FD  0856               	movf	___lbmod@dividend,w
   918  01FE  00D3               	movwf	??___lbmod
   919  01FF  3007               	movlw	7
   920  0200                     u555:	
   921  0200  1003               	clrc
   922  0201  0CD3               	rrf	??___lbmod,f
   923  0202  3EFF               	addlw	-1
   924  0203  1D03               	skipz
   925  0204  2A00               	goto	u555
   926  0205  0858               	movf	___lbmod@rem,w
   927  0206  00D4               	movwf	??___lbmod+1
   928  0207  0754               	addwf	??___lbmod+1,w
   929  0208  0453               	iorwf	??___lbmod,w
   930  0209  00D5               	movwf	??___lbmod+2
   931  020A  0855               	movf	??___lbmod+2,w
   932  020B  00D8               	movwf	___lbmod@rem
   933  020C  1003               	clrc
   934  020D  0DD6               	rlf	___lbmod@dividend,f
   935  020E  0852               	movf	___lbmod@divisor,w
   936  020F  0258               	subwf	___lbmod@rem,w
   937  0210  1C03               	skipc
   938  0211  2A14               	goto	l507
   939  0212  0852               	movf	___lbmod@divisor,w
   940  0213  02D8               	subwf	___lbmod@rem,f
   941  0214                     l507:	
   942  0214  3001               	movlw	1
   943  0215  02D7               	subwf	___lbmod@counter,f
   944  0216  1D03               	btfss	3,2
   945  0217  29FD               	goto	l1072
   946  0218  0858               	movf	___lbmod@rem,w
   947  0219  0008               	return
   948  021A                     __end_of___lbmod:	
   949                           
   950                           	psect	text3
   951  029C                     __ptext3:	
   952 ;; *************** function ___bmul *****************
   953 ;; Defined at:
   954 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;  multiplier      1    wreg     unsigned char 
   957 ;;  multiplicand    1    0[BANK0 ] unsigned char 
   958 ;; Auto vars:     Size  Location     Type
   959 ;;  multiplier      1    3[BANK0 ] unsigned char 
   960 ;;  product         1    2[BANK0 ] unsigned char 
   961 ;; Return value:  Size  Location     Type
   962 ;;                  1    wreg      unsigned char 
   963 ;; Registers used:
   964 ;;		wreg, status,2, status,0
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   970 ;;      Params:         0       1       0       0
   971 ;;      Locals:         0       2       0       0
   972 ;;      Temps:          0       1       0       0
   973 ;;      Totals:         0       4       0       0
   974 ;;Total ram usage:        4 bytes
   975 ;; Hardware stack levels used:    1
   976 ;; Hardware stack levels required when called:    1
   977 ;; This function calls:
   978 ;;		Nothing
   979 ;; This function is called by:
   980 ;;		_updateLED
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           
   985                           ;psect for function ___bmul
   986  029C                     ___bmul:	
   987                           
   988                           ;incstack = 0
   989                           ; Regs used in ___bmul: [wreg+status,2+status,0]
   990                           ;___bmul@multiplier stored from wreg
   991  029C  1283               	bcf	3,5	;RP0=0, select bank0
   992  029D  1303               	bcf	3,6	;RP1=0, select bank0
   993  029E  00D5               	movwf	___bmul@multiplier
   994  029F  01D4               	clrf	___bmul@product
   995  02A0                     l1054:	
   996  02A0  1C55               	btfss	___bmul@multiplier,0
   997  02A1  2AA6               	goto	l1058
   998  02A2  0852               	movf	___bmul@multiplicand,w
   999  02A3  00D3               	movwf	??___bmul
  1000  02A4  0853               	movf	??___bmul,w
  1001  02A5  07D4               	addwf	___bmul@product,f
  1002  02A6                     l1058:	
  1003  02A6  1003               	clrc
  1004  02A7  0DD2               	rlf	___bmul@multiplicand,f
  1005  02A8  1003               	clrc
  1006  02A9  0CD5               	rrf	___bmul@multiplier,f
  1007  02AA  08D5               	movf	___bmul@multiplier,f
  1008  02AB  1D03               	skipz
  1009  02AC  2AA0               	goto	l1054
  1010  02AD  0854               	movf	___bmul@product,w
  1011  02AE  0008               	return
  1012  02AF                     __end_of___bmul:	
  1013                           
  1014                           	psect	text4
  1015  023A                     __ptext4:	
  1016 ;; *************** function _turnOnLED *****************
  1017 ;; Defined at:
  1018 ;;		line 34 in file "led.c"
  1019 ;; Parameters:    Size  Location     Type
  1020 ;;  led             1    wreg     PTR struct LED
  1021 ;;		 -> led0(6), led1(6), led2(6), led3(6), 
  1022 ;;		 -> led4(6), 
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;  led             1    1[BANK0 ] PTR struct LED
  1025 ;;		 -> led0(6), led1(6), led2(6), led3(6), 
  1026 ;;		 -> led4(6), 
  1027 ;; Return value:  Size  Location     Type
  1028 ;;		None               void
  1029 ;; Registers used:
  1030 ;;		wreg, fsr0l, fsr0h
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1036 ;;      Params:         0       0       0       0
  1037 ;;      Locals:         0       1       0       0
  1038 ;;      Temps:          0       1       0       0
  1039 ;;      Totals:         0       2       0       0
  1040 ;;Total ram usage:        2 bytes
  1041 ;; Hardware stack levels used:    1
  1042 ;; Hardware stack levels required when called:    1
  1043 ;; This function calls:
  1044 ;;		Nothing
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           
  1051                           ;psect for function _turnOnLED
  1052  023A                     _turnOnLED:	
  1053                           
  1054                           ;incstack = 0
  1055                           ; Regs used in _turnOnLED: [wregfsr0]
  1056                           ;turnOnLED@led stored from wreg
  1057  023A  1283               	bcf	3,5	;RP0=0, select bank0
  1058  023B  1303               	bcf	3,6	;RP1=0, select bank0
  1059  023C  00D3               	movwf	turnOnLED@led
  1060                           
  1061                           ;led.c: 36: led->count = led->initialCount;
  1062  023D  0853               	movf	turnOnLED@led,w
  1063  023E  3E02               	addlw	2
  1064  023F  0084               	movwf	4
  1065  0240  1383               	bcf	3,7	;select IRP bank0
  1066  0241  0800               	movf	0,w
  1067  0242  00D2               	movwf	??_turnOnLED
  1068  0243  0A53               	incf	turnOnLED@led,w
  1069  0244  0084               	movwf	4
  1070  0245  0852               	movf	??_turnOnLED,w
  1071  0246  0080               	movwf	0
  1072                           
  1073                           ;led.c: 37: led->state = LEDState_Counting;
  1074  0247  0853               	movf	turnOnLED@led,w
  1075  0248  3E03               	addlw	3
  1076  0249  0084               	movwf	4
  1077  024A  0180               	clrf	0
  1078  024B  0A80               	incf	0,f
  1079                           
  1080                           ;led.c: 38: led->currentPhase = led->initialPhase;
  1081  024C  0853               	movf	turnOnLED@led,w
  1082  024D  3E05               	addlw	5
  1083  024E  0084               	movwf	4
  1084  024F  0800               	movf	0,w
  1085  0250  00D2               	movwf	??_turnOnLED
  1086  0251  0853               	movf	turnOnLED@led,w
  1087  0252  3E04               	addlw	4
  1088  0253  0084               	movwf	4
  1089  0254  0852               	movf	??_turnOnLED,w
  1090  0255  0080               	movwf	0
  1091  0256  0008               	return
  1092  0257                     __end_of_turnOnLED:	
  1093                           
  1094                           	psect	text5
  1095  026F                     __ptext5:	
  1096 ;; *************** function _t2setup *****************
  1097 ;; Defined at:
  1098 ;;		line 128 in file "toothbrush_counter.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;		None
  1103 ;; Return value:  Size  Location     Type
  1104 ;;		None               void
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1112 ;;      Params:         0       0       0       0
  1113 ;;      Locals:         0       0       0       0
  1114 ;;      Temps:          0       0       0       0
  1115 ;;      Totals:         0       0       0       0
  1116 ;;Total ram usage:        0 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    1
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           
  1127                           ;psect for function _t2setup
  1128  026F                     _t2setup:	
  1129                           
  1130                           ;toothbrush_counter.c: 130: T2CONbits.T2CKPS = t2ps1to16;
  1131                           
  1132                           ;incstack = 0
  1133                           ; Regs used in _t2setup: [wreg+status,2+status,0]
  1134  026F  3003               	movlw	3
  1135  0270  1283               	bcf	3,5	;RP0=0, select bank0
  1136  0271  1303               	bcf	3,6	;RP1=0, select bank0
  1137  0272  0492               	iorwf	18,f	;volatile
  1138                           
  1139                           ;toothbrush_counter.c: 131: T2CONbits.TOUTPS = t2post1to1;
  1140  0273  3087               	movlw	-121
  1141  0274  0592               	andwf	18,f	;volatile
  1142                           
  1143                           ;toothbrush_counter.c: 132: TMR2 = 0x00;
  1144  0275  0191               	clrf	17	;volatile
  1145                           
  1146                           ;toothbrush_counter.c: 133: PR2 = offtime;
  1147  0276  0875               	movf	_offtime,w	;volatile
  1148  0277  1683               	bsf	3,5	;RP0=1, select bank1
  1149  0278  1303               	bcf	3,6	;RP1=0, select bank1
  1150  0279  0092               	movwf	18	;volatile
  1151                           
  1152                           ;toothbrush_counter.c: 135: PIR1bits.TMR2IF = 0b0;
  1153  027A  1283               	bcf	3,5	;RP0=0, select bank0
  1154  027B  1303               	bcf	3,6	;RP1=0, select bank0
  1155  027C  108C               	bcf	12,1	;volatile
  1156                           
  1157                           ;toothbrush_counter.c: 136: INTCONbits.GIE = 0b1;
  1158  027D  178B               	bsf	11,7	;volatile
  1159                           
  1160                           ;toothbrush_counter.c: 137: INTCONbits.PEIE = 0b1;
  1161  027E  170B               	bsf	11,6	;volatile
  1162                           
  1163                           ;toothbrush_counter.c: 138: PIE1bits.T2IE = 0b1;
  1164  027F  1683               	bsf	3,5	;RP0=1, select bank1
  1165  0280  1303               	bcf	3,6	;RP1=0, select bank1
  1166  0281  148C               	bsf	12,1	;volatile
  1167                           
  1168                           ;toothbrush_counter.c: 139: T2CONbits.TMR2ON = 0b1;
  1169  0282  1283               	bcf	3,5	;RP0=0, select bank0
  1170  0283  1303               	bcf	3,6	;RP1=0, select bank0
  1171  0284  1512               	bsf	18,2	;volatile
  1172  0285  0008               	return
  1173  0286                     __end_of_t2setup:	
  1174                           
  1175                           	psect	text6
  1176  02AF                     __ptext6:	
  1177 ;; *************** function _t1setup *****************
  1178 ;; Defined at:
  1179 ;;		line 112 in file "toothbrush_counter.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;		None
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;		None
  1184 ;; Return value:  Size  Location     Type
  1185 ;;		None               void
  1186 ;; Registers used:
  1187 ;;		wreg, status,2, status,0
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1193 ;;      Params:         0       0       0       0
  1194 ;;      Locals:         0       0       0       0
  1195 ;;      Temps:          0       0       0       0
  1196 ;;      Totals:         0       0       0       0
  1197 ;;Total ram usage:        0 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; Hardware stack levels required when called:    1
  1200 ;; This function calls:
  1201 ;;		Nothing
  1202 ;; This function is called by:
  1203 ;;		_main
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           
  1208                           ;psect for function _t1setup
  1209  02AF                     _t1setup:	
  1210                           
  1211                           ;toothbrush_counter.c: 114: T1CONbits.T1CKPS = t1ps1to8;
  1212                           
  1213                           ;incstack = 0
  1214                           ; Regs used in _t1setup: [wreg+status,2+status,0]
  1215  02AF  3030               	movlw	48
  1216  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  1217  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  1218  02B2  0490               	iorwf	16,f	;volatile
  1219                           
  1220                           ;toothbrush_counter.c: 115: T1CONbits.TMR1CS = 0b0;
  1221  02B3  1090               	bcf	16,1	;volatile
  1222                           
  1223                           ;toothbrush_counter.c: 116: TMR1H = 0x00;
  1224  02B4  018F               	clrf	15	;volatile
  1225                           
  1226                           ;toothbrush_counter.c: 117: TMR1L = 0x00;
  1227  02B5  018E               	clrf	14	;volatile
  1228                           
  1229                           ;toothbrush_counter.c: 119: PIR1bits.TMR1IF = 0b0;
  1230  02B6  100C               	bcf	12,0	;volatile
  1231                           
  1232                           ;toothbrush_counter.c: 120: INTCONbits.GIE = 0b1;
  1233  02B7  178B               	bsf	11,7	;volatile
  1234                           
  1235                           ;toothbrush_counter.c: 121: INTCONbits.PEIE = 0b1;
  1236  02B8  170B               	bsf	11,6	;volatile
  1237                           
  1238                           ;toothbrush_counter.c: 122: PIE1bits.T1IE = 0b01;
  1239  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  1240  02BA  1303               	bcf	3,6	;RP1=0, select bank1
  1241  02BB  140C               	bsf	12,0	;volatile
  1242                           
  1243                           ;toothbrush_counter.c: 123: T1CONbits.TMR1ON = 0b1;
  1244  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  1245  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  1246  02BE  1410               	bsf	16,0	;volatile
  1247  02BF  0008               	return
  1248  02C0                     __end_of_t1setup:	
  1249                           
  1250                           	psect	text7
  1251  0286                     __ptext7:	
  1252 ;; *************** function _setup *****************
  1253 ;; Defined at:
  1254 ;;		line 97 in file "toothbrush_counter.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;		None
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;		None
  1259 ;; Return value:  Size  Location     Type
  1260 ;;		None               void
  1261 ;; Registers used:
  1262 ;;		wreg, status,2, status,0
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1268 ;;      Params:         0       0       0       0
  1269 ;;      Locals:         0       0       0       0
  1270 ;;      Temps:          0       0       0       0
  1271 ;;      Totals:         0       0       0       0
  1272 ;;Total ram usage:        0 bytes
  1273 ;; Hardware stack levels used:    1
  1274 ;; Hardware stack levels required when called:    1
  1275 ;; This function calls:
  1276 ;;		Nothing
  1277 ;; This function is called by:
  1278 ;;		_main
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           
  1283                           ;psect for function _setup
  1284  0286                     _setup:	
  1285                           
  1286                           ;toothbrush_counter.c: 99: OSCCONbits.IRCF = 0b111;
  1287                           
  1288                           ;incstack = 0
  1289                           ; Regs used in _setup: [wreg+status,2+status,0]
  1290  0286  3070               	movlw	112
  1291  0287  1683               	bsf	3,5	;RP0=1, select bank1
  1292  0288  1303               	bcf	3,6	;RP1=0, select bank1
  1293  0289  048F               	iorwf	15,f	;volatile
  1294                           
  1295                           ;toothbrush_counter.c: 100: ANSEL = 0x00;
  1296  028A  1283               	bcf	3,5	;RP0=0, select bank2
  1297  028B  1703               	bsf	3,6	;RP1=1, select bank2
  1298  028C  019E               	clrf	30	;volatile
  1299                           
  1300                           ;toothbrush_counter.c: 101: ANSELH = 0x00;
  1301  028D  019F               	clrf	31	;volatile
  1302                           
  1303                           ;toothbrush_counter.c: 102: TRISC = 0xE0;
  1304  028E  30E0               	movlw	224
  1305  028F  1683               	bsf	3,5	;RP0=1, select bank1
  1306  0290  1303               	bcf	3,6	;RP1=0, select bank1
  1307  0291  0087               	movwf	7	;volatile
  1308                           
  1309                           ;toothbrush_counter.c: 103: TRISA = 0xFF;
  1310  0292  30FF               	movlw	255
  1311  0293  0085               	movwf	5	;volatile
  1312                           
  1313                           ;toothbrush_counter.c: 104: WPUA = 0x37;
  1314  0294  3037               	movlw	55
  1315  0295  0095               	movwf	21	;volatile
  1316                           
  1317                           ;toothbrush_counter.c: 105: OPTION_REGbits.nRABPU = 0b0;
  1318  0296  1381               	bcf	1,7	;volatile
  1319                           
  1320                           ;toothbrush_counter.c: 106: CCP1CONbits.CCP1M = 0b0000;
  1321  0297  30F0               	movlw	-16
  1322  0298  1283               	bcf	3,5	;RP0=0, select bank0
  1323  0299  1303               	bcf	3,6	;RP1=0, select bank0
  1324  029A  0597               	andwf	23,f	;volatile
  1325  029B  0008               	return
  1326  029C                     __end_of_setup:	
  1327                           
  1328                           	psect	text8
  1329  01B4                     __ptext8:	
  1330 ;; *************** function _phaseSetup *****************
  1331 ;; Defined at:
  1332 ;;		line 191 in file "toothbrush_counter.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;		None
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;		None
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      PTR struct Phase
  1339 ;; Registers used:
  1340 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1346 ;;      Params:         0       0       0       0
  1347 ;;      Locals:         0       0       0       0
  1348 ;;      Temps:          0       3       0       0
  1349 ;;      Totals:         0       3       0       0
  1350 ;;Total ram usage:        3 bytes
  1351 ;; Hardware stack levels used:    1
  1352 ;; Hardware stack levels required when called:    2
  1353 ;; This function calls:
  1354 ;;		_setupPhase
  1355 ;; This function is called by:
  1356 ;;		_main
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           
  1361                           ;psect for function _phaseSetup
  1362  01B4                     _phaseSetup:	
  1363                           
  1364                           ;toothbrush_counter.c: 193: setupPhase(&phase3, 8, 32, &phase2);
  1365                           
  1366                           ;incstack = 0
  1367                           ; Regs used in _phaseSetup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1368  01B4  3008               	movlw	8
  1369  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1370  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1371  01B7  00D7               	movwf	??_phaseSetup
  1372  01B8  0857               	movf	??_phaseSetup,w
  1373  01B9  00D2               	movwf	setupPhase@blinkDivisor
  1374  01BA  3020               	movlw	32
  1375  01BB  00D8               	movwf	??_phaseSetup+1
  1376  01BC  0858               	movf	??_phaseSetup+1,w
  1377  01BD  00D3               	movwf	setupPhase@blinkCountThreshold
  1378  01BE  304C               	movlw	_phase2& (0+255)
  1379  01BF  00D9               	movwf	??_phaseSetup+2
  1380  01C0  0859               	movf	??_phaseSetup+2,w
  1381  01C1  00D4               	movwf	setupPhase@nextPhase
  1382  01C2  304F               	movlw	_phase3& (0+255)
  1383  01C3  118A  2257  118A   	fcall	_setupPhase
  1384                           
  1385                           ;toothbrush_counter.c: 194: setupPhase(&phase2, 4, 16, &phase1);
  1386  01C6  3004               	movlw	4
  1387  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  1388  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  1389  01C9  00D7               	movwf	??_phaseSetup
  1390  01CA  0857               	movf	??_phaseSetup,w
  1391  01CB  00D2               	movwf	setupPhase@blinkDivisor
  1392  01CC  3010               	movlw	16
  1393  01CD  00D8               	movwf	??_phaseSetup+1
  1394  01CE  0858               	movf	??_phaseSetup+1,w
  1395  01CF  00D3               	movwf	setupPhase@blinkCountThreshold
  1396  01D0  3049               	movlw	_phase1& (0+255)
  1397  01D1  00D9               	movwf	??_phaseSetup+2
  1398  01D2  0859               	movf	??_phaseSetup+2,w
  1399  01D3  00D4               	movwf	setupPhase@nextPhase
  1400  01D4  304C               	movlw	_phase2& (0+255)
  1401  01D5  118A  2257  118A   	fcall	_setupPhase
  1402                           
  1403                           ;toothbrush_counter.c: 195: setupPhase(&phase1, 2, 8, &phase0);
  1404  01D8  3002               	movlw	2
  1405  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1406  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1407  01DB  00D7               	movwf	??_phaseSetup
  1408  01DC  0857               	movf	??_phaseSetup,w
  1409  01DD  00D2               	movwf	setupPhase@blinkDivisor
  1410  01DE  3008               	movlw	8
  1411  01DF  00D8               	movwf	??_phaseSetup+1
  1412  01E0  0858               	movf	??_phaseSetup+1,w
  1413  01E1  00D3               	movwf	setupPhase@blinkCountThreshold
  1414  01E2  3046               	movlw	_phase0& (0+255)
  1415  01E3  00D9               	movwf	??_phaseSetup+2
  1416  01E4  0859               	movf	??_phaseSetup+2,w
  1417  01E5  00D4               	movwf	setupPhase@nextPhase
  1418  01E6  3049               	movlw	_phase1& (0+255)
  1419  01E7  118A  2257  118A   	fcall	_setupPhase
  1420                           
  1421                           ;toothbrush_counter.c: 196: setupPhase(&phase0, 1, 0, (0));
  1422  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1423  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1424  01EC  01D2               	clrf	setupPhase@blinkDivisor
  1425  01ED  0AD2               	incf	setupPhase@blinkDivisor,f
  1426  01EE  01D3               	clrf	setupPhase@blinkCountThreshold
  1427  01EF  01D4               	clrf	setupPhase@nextPhase
  1428  01F0  3046               	movlw	_phase0& (0+255)
  1429  01F1  118A  2257         	fcall	_setupPhase
  1430                           
  1431                           ;toothbrush_counter.c: 198: return &phase3;
  1432  01F3  304F               	movlw	_phase3& (0+255)
  1433  01F4  0008               	return
  1434  01F5                     __end_of_phaseSetup:	
  1435                           
  1436                           	psect	text9
  1437  0257                     __ptext9:	
  1438 ;; *************** function _setupPhase *****************
  1439 ;; Defined at:
  1440 ;;		line 23 in file "led.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;  phase           1    wreg     PTR struct Phase
  1443 ;;		 -> phase0(3), phase1(3), phase2(3), phase3(3), 
  1444 ;;  blinkDivisor    1    0[BANK0 ] unsigned char 
  1445 ;;  blinkCountTh    1    1[BANK0 ] unsigned char 
  1446 ;;  nextPhase       1    2[BANK0 ] PTR struct Phase
  1447 ;;		 -> NULL(0), phase0(3), phase1(3), phase2(3), 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  phase           1    4[BANK0 ] PTR struct Phase
  1450 ;;		 -> phase0(3), phase1(3), phase2(3), phase3(3), 
  1451 ;; Return value:  Size  Location     Type
  1452 ;;		None               void
  1453 ;; Registers used:
  1454 ;;		wreg, fsr0l, fsr0h
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1460 ;;      Params:         0       3       0       0
  1461 ;;      Locals:         0       1       0       0
  1462 ;;      Temps:          0       1       0       0
  1463 ;;      Totals:         0       5       0       0
  1464 ;;Total ram usage:        5 bytes
  1465 ;; Hardware stack levels used:    1
  1466 ;; Hardware stack levels required when called:    1
  1467 ;; This function calls:
  1468 ;;		Nothing
  1469 ;; This function is called by:
  1470 ;;		_phaseSetup
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474                           
  1475                           ;psect for function _setupPhase
  1476  0257                     _setupPhase:	
  1477                           
  1478                           ;incstack = 0
  1479                           ; Regs used in _setupPhase: [wregfsr0]
  1480                           ;setupPhase@phase stored from wreg
  1481  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1482  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1483  0259  00D6               	movwf	setupPhase@phase
  1484                           
  1485                           ;led.c: 28: phase->blinkDivisor = blinkDivisor;
  1486  025A  0852               	movf	setupPhase@blinkDivisor,w
  1487  025B  00D5               	movwf	??_setupPhase
  1488  025C  0856               	movf	setupPhase@phase,w
  1489  025D  0084               	movwf	4
  1490  025E  0855               	movf	??_setupPhase,w
  1491  025F  1383               	bcf	3,7	;select IRP bank0
  1492  0260  0080               	movwf	0
  1493                           
  1494                           ;led.c: 29: phase->blinkCountThreshold = blinkCountThreshold;
  1495  0261  0853               	movf	setupPhase@blinkCountThreshold,w
  1496  0262  00D5               	movwf	??_setupPhase
  1497  0263  0A56               	incf	setupPhase@phase,w
  1498  0264  0084               	movwf	4
  1499  0265  0855               	movf	??_setupPhase,w
  1500  0266  0080               	movwf	0
  1501                           
  1502                           ;led.c: 30: phase->nextPhase = nextPhase;
  1503  0267  0854               	movf	setupPhase@nextPhase,w
  1504  0268  00D5               	movwf	??_setupPhase
  1505  0269  0856               	movf	setupPhase@phase,w
  1506  026A  3E02               	addlw	2
  1507  026B  0084               	movwf	4
  1508  026C  0855               	movf	??_setupPhase,w
  1509  026D  0080               	movwf	0
  1510  026E  0008               	return
  1511  026F                     __end_of_setupPhase:	
  1512                           
  1513                           	psect	text10
  1514  010D                     __ptext10:	
  1515 ;; *************** function _LEDSetup *****************
  1516 ;; Defined at:
  1517 ;;		line 201 in file "toothbrush_counter.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;  initialPhase    1    wreg     PTR struct Phase
  1520 ;;		 -> phase3(3), 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  initialPhase    1    8[BANK0 ] PTR struct Phase
  1523 ;;		 -> phase3(3), 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;		None               void
  1526 ;; Registers used:
  1527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1533 ;;      Params:         0       0       0       0
  1534 ;;      Locals:         0       1       0       0
  1535 ;;      Temps:          0       3       0       0
  1536 ;;      Totals:         0       4       0       0
  1537 ;;Total ram usage:        4 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    2
  1540 ;; This function calls:
  1541 ;;		_setupLED
  1542 ;; This function is called by:
  1543 ;;		_main
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           
  1548                           ;psect for function _LEDSetup
  1549  010D                     _LEDSetup:	
  1550                           
  1551                           ;incstack = 0
  1552                           ; Regs used in _LEDSetup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1553                           ;LEDSetup@initialPhase stored from wreg
  1554  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1555  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1556  010F  00DA               	movwf	LEDSetup@initialPhase
  1557                           
  1558                           ;toothbrush_counter.c: 203: setupLED(&led4, 0b00010000, 64, initialPhase);
  1559  0110  3010               	movlw	16
  1560  0111  00D7               	movwf	??_LEDSetup
  1561  0112  0857               	movf	??_LEDSetup,w
  1562  0113  00D2               	movwf	setupLED@LEDMask
  1563  0114  3040               	movlw	64
  1564  0115  00D8               	movwf	??_LEDSetup+1
  1565  0116  0858               	movf	??_LEDSetup+1,w
  1566  0117  00D3               	movwf	setupLED@initialCount
  1567  0118  085A               	movf	LEDSetup@initialPhase,w
  1568  0119  00D9               	movwf	??_LEDSetup+2
  1569  011A  0859               	movf	??_LEDSetup+2,w
  1570  011B  00D4               	movwf	setupLED@initialPhase
  1571  011C  3040               	movlw	_led4& (0+255)
  1572  011D  118A  221A  118A   	fcall	_setupLED
  1573                           
  1574                           ;toothbrush_counter.c: 204: setupLED(&led3, 0b00001000, 64, initialPhase);
  1575  0120  3008               	movlw	8
  1576  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1577  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1578  0123  00D7               	movwf	??_LEDSetup
  1579  0124  0857               	movf	??_LEDSetup,w
  1580  0125  00D2               	movwf	setupLED@LEDMask
  1581  0126  3040               	movlw	64
  1582  0127  00D8               	movwf	??_LEDSetup+1
  1583  0128  0858               	movf	??_LEDSetup+1,w
  1584  0129  00D3               	movwf	setupLED@initialCount
  1585  012A  085A               	movf	LEDSetup@initialPhase,w
  1586  012B  00D9               	movwf	??_LEDSetup+2
  1587  012C  0859               	movf	??_LEDSetup+2,w
  1588  012D  00D4               	movwf	setupLED@initialPhase
  1589  012E  303A               	movlw	_led3& (0+255)
  1590  012F  118A  221A  118A   	fcall	_setupLED
  1591                           
  1592                           ;toothbrush_counter.c: 205: setupLED(&led2, 0b00000100, 64, initialPhase);
  1593  0132  3004               	movlw	4
  1594  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1595  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1596  0135  00D7               	movwf	??_LEDSetup
  1597  0136  0857               	movf	??_LEDSetup,w
  1598  0137  00D2               	movwf	setupLED@LEDMask
  1599  0138  3040               	movlw	64
  1600  0139  00D8               	movwf	??_LEDSetup+1
  1601  013A  0858               	movf	??_LEDSetup+1,w
  1602  013B  00D3               	movwf	setupLED@initialCount
  1603  013C  085A               	movf	LEDSetup@initialPhase,w
  1604  013D  00D9               	movwf	??_LEDSetup+2
  1605  013E  0859               	movf	??_LEDSetup+2,w
  1606  013F  00D4               	movwf	setupLED@initialPhase
  1607  0140  3034               	movlw	_led2& (0+255)
  1608  0141  118A  221A  118A   	fcall	_setupLED
  1609                           
  1610                           ;toothbrush_counter.c: 206: setupLED(&led1, 0b00000010, 64, initialPhase);
  1611  0144  3002               	movlw	2
  1612  0145  1283               	bcf	3,5	;RP0=0, select bank0
  1613  0146  1303               	bcf	3,6	;RP1=0, select bank0
  1614  0147  00D7               	movwf	??_LEDSetup
  1615  0148  0857               	movf	??_LEDSetup,w
  1616  0149  00D2               	movwf	setupLED@LEDMask
  1617  014A  3040               	movlw	64
  1618  014B  00D8               	movwf	??_LEDSetup+1
  1619  014C  0858               	movf	??_LEDSetup+1,w
  1620  014D  00D3               	movwf	setupLED@initialCount
  1621  014E  085A               	movf	LEDSetup@initialPhase,w
  1622  014F  00D9               	movwf	??_LEDSetup+2
  1623  0150  0859               	movf	??_LEDSetup+2,w
  1624  0151  00D4               	movwf	setupLED@initialPhase
  1625  0152  302E               	movlw	_led1& (0+255)
  1626  0153  118A  221A  118A   	fcall	_setupLED
  1627                           
  1628                           ;toothbrush_counter.c: 207: setupLED(&led0, 0b00000001, 64, initialPhase);
  1629  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1630  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1631  0158  01D2               	clrf	setupLED@LEDMask
  1632  0159  0AD2               	incf	setupLED@LEDMask,f
  1633  015A  3040               	movlw	64
  1634  015B  00D7               	movwf	??_LEDSetup
  1635  015C  0857               	movf	??_LEDSetup,w
  1636  015D  00D3               	movwf	setupLED@initialCount
  1637  015E  085A               	movf	LEDSetup@initialPhase,w
  1638  015F  00D8               	movwf	??_LEDSetup+1
  1639  0160  0858               	movf	??_LEDSetup+1,w
  1640  0161  00D4               	movwf	setupLED@initialPhase
  1641  0162  3028               	movlw	_led0& (0+255)
  1642  0163  118A  221A         	fcall	_setupLED
  1643  0165  0008               	return
  1644  0166                     __end_of_LEDSetup:	
  1645                           
  1646                           	psect	text11
  1647  021A                     __ptext11:	
  1648 ;; *************** function _setupLED *****************
  1649 ;; Defined at:
  1650 ;;		line 10 in file "led.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  led             1    wreg     PTR struct LED
  1653 ;;		 -> led0(6), led1(6), led2(6), led3(6), 
  1654 ;;		 -> led4(6), 
  1655 ;;  LEDMask         1    0[BANK0 ] unsigned char 
  1656 ;;  initialCount    1    1[BANK0 ] unsigned char 
  1657 ;;  initialPhase    1    2[BANK0 ] PTR struct Phase
  1658 ;;		 -> phase3(3), 
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;  led             1    4[BANK0 ] PTR struct LED
  1661 ;;		 -> led0(6), led1(6), led2(6), led3(6), 
  1662 ;;		 -> led4(6), 
  1663 ;; Return value:  Size  Location     Type
  1664 ;;		None               void
  1665 ;; Registers used:
  1666 ;;		wreg, fsr0l, fsr0h, status,2
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1672 ;;      Params:         0       3       0       0
  1673 ;;      Locals:         0       1       0       0
  1674 ;;      Temps:          0       1       0       0
  1675 ;;      Totals:         0       5       0       0
  1676 ;;Total ram usage:        5 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    1
  1679 ;; This function calls:
  1680 ;;		Nothing
  1681 ;; This function is called by:
  1682 ;;		_LEDSetup
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           
  1687                           ;psect for function _setupLED
  1688  021A                     _setupLED:	
  1689                           
  1690                           ;incstack = 0
  1691                           ; Regs used in _setupLED: [wreg-fsr0h+status,2]
  1692                           ;setupLED@led stored from wreg
  1693  021A  1283               	bcf	3,5	;RP0=0, select bank0
  1694  021B  1303               	bcf	3,6	;RP1=0, select bank0
  1695  021C  00D6               	movwf	setupLED@led
  1696                           
  1697                           ;led.c: 15: led->LEDMask = LEDMask;
  1698  021D  0852               	movf	setupLED@LEDMask,w
  1699  021E  00D5               	movwf	??_setupLED
  1700  021F  0856               	movf	setupLED@led,w
  1701  0220  0084               	movwf	4
  1702  0221  0855               	movf	??_setupLED,w
  1703  0222  1383               	bcf	3,7	;select IRP bank0
  1704  0223  0080               	movwf	0
  1705                           
  1706                           ;led.c: 16: led->count = 0;
  1707  0224  0A56               	incf	setupLED@led,w
  1708  0225  0084               	movwf	4
  1709  0226  0180               	clrf	0
  1710                           
  1711                           ;led.c: 17: led->initialCount = initialCount;
  1712  0227  0853               	movf	setupLED@initialCount,w
  1713  0228  00D5               	movwf	??_setupLED
  1714  0229  0856               	movf	setupLED@led,w
  1715  022A  3E02               	addlw	2
  1716  022B  0084               	movwf	4
  1717  022C  0855               	movf	??_setupLED,w
  1718  022D  0080               	movwf	0
  1719                           
  1720                           ;led.c: 18: led->currentPhase = (0);
  1721  022E  0856               	movf	setupLED@led,w
  1722  022F  3E04               	addlw	4
  1723  0230  0084               	movwf	4
  1724  0231  0180               	clrf	0
  1725                           
  1726                           ;led.c: 19: led->initialPhase = initialPhase;
  1727  0232  0854               	movf	setupLED@initialPhase,w
  1728  0233  00D5               	movwf	??_setupLED
  1729  0234  0856               	movf	setupLED@led,w
  1730  0235  3E05               	addlw	5
  1731  0236  0084               	movwf	4
  1732  0237  0855               	movf	??_setupLED,w
  1733  0238  0080               	movwf	0
  1734  0239  0008               	return
  1735  023A                     __end_of_setupLED:	
  1736                           
  1737                           	psect	text12
  1738  0166                     __ptext12:	
  1739 ;; *************** function _ISR *****************
  1740 ;; Defined at:
  1741 ;;		line 142 in file "toothbrush_counter.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;		None               void
  1748 ;; Registers used:
  1749 ;;		wreg, status,2, status,0
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1755 ;;      Params:         0       0       0       0
  1756 ;;      Locals:         0       0       0       0
  1757 ;;      Temps:          5       0       0       0
  1758 ;;      Totals:         5       0       0       0
  1759 ;;Total ram usage:        5 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; This function calls:
  1762 ;;		Nothing
  1763 ;; This function is called by:
  1764 ;;		Interrupt level 1
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           
  1769                           ;psect for function _ISR
  1770  0166                     _ISR:	
  1771                           
  1772                           ;toothbrush_counter.c: 144: if (PIR1bits.TMR1IF)
  1773  0166  180C               	btfsc	12,0	;volatile
  1774                           
  1775                           ;toothbrush_counter.c: 145: {
  1776                           ;toothbrush_counter.c: 148: PIR1bits.TMR1IF = 0;
  1777  0167  100C               	bcf	12,0	;volatile
  1778                           
  1779                           ;toothbrush_counter.c: 151: }
  1780                           ;toothbrush_counter.c: 152: if (PIR1bits.TMR2IF)
  1781  0168  1C8C               	btfss	12,1	;volatile
  1782  0169  29A9               	goto	i1l134
  1783                           
  1784                           ;toothbrush_counter.c: 153: {
  1785                           ;toothbrush_counter.c: 154: PIR1bits.TMR2IF = 0;
  1786  016A  108C               	bcf	12,1	;volatile
  1787                           
  1788                           ;toothbrush_counter.c: 156: if (onoff)
  1789  016B  0879               	movf	_onoff,w	;volatile
  1790  016C  1903               	btfsc	3,2
  1791  016D  2977               	goto	i1l1022
  1792                           
  1793                           ;toothbrush_counter.c: 157: {
  1794                           ;toothbrush_counter.c: 158: PR2 = offtime;
  1795  016E  0875               	movf	_offtime,w	;volatile
  1796  016F  1683               	bsf	3,5	;RP0=1, select bank1
  1797  0170  1303               	bcf	3,6	;RP1=0, select bank1
  1798  0171  0092               	movwf	18	;volatile
  1799                           
  1800                           ;toothbrush_counter.c: 159: PORTC = 0x00;
  1801  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1802  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1803  0174  0187               	clrf	7	;volatile
  1804                           
  1805                           ;toothbrush_counter.c: 160: onoff = 0;
  1806  0175  01F9               	clrf	_onoff	;volatile
  1807                           
  1808                           ;toothbrush_counter.c: 161: }
  1809  0176  2984               	goto	i1l1028
  1810  0177                     i1l1022:	
  1811                           
  1812                           ;toothbrush_counter.c: 162: else
  1813                           ;toothbrush_counter.c: 163: {
  1814                           ;toothbrush_counter.c: 164: PR2 = ontime;
  1815  0177  0876               	movf	_ontime,w	;volatile
  1816  0178  1683               	bsf	3,5	;RP0=1, select bank1
  1817  0179  1303               	bcf	3,6	;RP1=0, select bank1
  1818  017A  0092               	movwf	18	;volatile
  1819                           
  1820                           ;toothbrush_counter.c: 165: PORTC = LEDOnMask & 0x1F;
  1821  017B  0878               	movf	_LEDOnMask,w	;volatile
  1822  017C  391F               	andlw	31
  1823  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1824  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1825  017F  0087               	movwf	7	;volatile
  1826                           
  1827                           ;toothbrush_counter.c: 166: onoff = 1;
  1828  0180  3001               	movlw	1
  1829  0181  00F0               	movwf	??_ISR
  1830  0182  0870               	movf	??_ISR,w
  1831  0183  00F9               	movwf	_onoff	;volatile
  1832  0184                     i1l1028:	
  1833                           
  1834                           ;toothbrush_counter.c: 167: }
  1835                           ;toothbrush_counter.c: 168: if (updown)
  1836  0184  0877               	movf	_updown,w	;volatile
  1837  0185  1903               	btfsc	3,2
  1838  0186  2993               	goto	i1l1036
  1839                           
  1840                           ;toothbrush_counter.c: 169: {
  1841                           ;toothbrush_counter.c: 170: ontime += 2;
  1842  0187  3002               	movlw	2
  1843  0188  00F0               	movwf	??_ISR
  1844  0189  0870               	movf	??_ISR,w
  1845  018A  07F6               	addwf	_ontime,f	;volatile
  1846                           
  1847                           ;toothbrush_counter.c: 171: offtime -= 2;
  1848  018B  3002               	movlw	2
  1849  018C  02F5               	subwf	_offtime,f	;volatile
  1850                           
  1851                           ;toothbrush_counter.c: 172: if (ontime >= 0xFC)
  1852  018D  30FC               	movlw	252
  1853  018E  0276               	subwf	_ontime,w	;volatile
  1854  018F  1C03               	skipc
  1855  0190  29A9               	goto	i1l134
  1856                           
  1857                           ;toothbrush_counter.c: 173: updown = 0;
  1858  0191  01F7               	clrf	_updown	;volatile
  1859                           
  1860                           ;toothbrush_counter.c: 174: }
  1861  0192  29A9               	goto	i1l134
  1862  0193                     i1l1036:	
  1863                           
  1864                           ;toothbrush_counter.c: 175: else
  1865                           ;toothbrush_counter.c: 176: {
  1866                           ;toothbrush_counter.c: 177: ontime -= 2;
  1867  0193  3002               	movlw	2
  1868  0194  02F6               	subwf	_ontime,f	;volatile
  1869                           
  1870                           ;toothbrush_counter.c: 178: offtime += 2;
  1871  0195  3002               	movlw	2
  1872  0196  00F0               	movwf	??_ISR
  1873  0197  0870               	movf	??_ISR,w
  1874  0198  07F5               	addwf	_offtime,f	;volatile
  1875                           
  1876                           ;toothbrush_counter.c: 179: if (ontime <= 0x05)
  1877  0199  3006               	movlw	6
  1878  019A  0276               	subwf	_ontime,w	;volatile
  1879  019B  1803               	skipnc
  1880  019C  29A9               	goto	i1l134
  1881                           
  1882                           ;toothbrush_counter.c: 180: {
  1883                           ;toothbrush_counter.c: 181: updown = 1;
  1884  019D  3001               	movlw	1
  1885  019E  00F0               	movwf	??_ISR
  1886  019F  0870               	movf	??_ISR,w
  1887  01A0  00F7               	movwf	_updown	;volatile
  1888                           
  1889                           ;toothbrush_counter.c: 182: LEDOnMask = LEDOnMaskNext;
  1890  01A1  0824               	movf	_LEDOnMaskNext,w	;volatile
  1891  01A2  00F0               	movwf	??_ISR
  1892  01A3  0870               	movf	??_ISR,w
  1893  01A4  00F8               	movwf	_LEDOnMask	;volatile
  1894                           
  1895                           ;toothbrush_counter.c: 183: updateLEDs = 1;
  1896  01A5  3001               	movlw	1
  1897  01A6  00F0               	movwf	??_ISR
  1898  01A7  0870               	movf	??_ISR,w
  1899  01A8  00A7               	movwf	_updateLEDs	;volatile
  1900  01A9                     i1l134:	
  1901  01A9  0874               	movf	??_ISR+4,w
  1902  01AA  00FF               	movwf	127
  1903  01AB  0873               	movf	??_ISR+3,w
  1904  01AC  008A               	movwf	10
  1905  01AD  0872               	movf	??_ISR+2,w
  1906  01AE  0084               	movwf	4
  1907  01AF  0E71               	swapf	(??_ISR+1)^(0+-128),w
  1908  01B0  0083               	movwf	3
  1909  01B1  0EFE               	swapf	126,f
  1910  01B2  0E7E               	swapf	126,w
  1911  01B3  0009               	retfie
  1912  01B4                     __end_of_ISR:	
  1913  007E                     btemp	set	126	;btemp
  1914  007E                     wtemp	set	126
  1915  007E                     wtemp0	set	126
  1916  0080                     wtemp1	set	128
  1917  0082                     wtemp2	set	130
  1918  0084                     wtemp3	set	132
  1919  0086                     wtemp4	set	134
  1920  0088                     wtemp5	set	136
  1921  007F                     wtemp6	set	127
  1922  007E                     ttemp	set	126
  1923  007E                     ttemp0	set	126
  1924  0081                     ttemp1	set	129
  1925  0084                     ttemp2	set	132
  1926  0087                     ttemp3	set	135
  1927  007F                     ttemp4	set	127
  1928  007E                     ltemp	set	126
  1929  007E                     ltemp0	set	126
  1930  0082                     ltemp1	set	130
  1931  0086                     ltemp2	set	134
  1932  0080                     ltemp3	set	128
  1933                           
  1934                           	psect	intentry
  1935  0004                     __pintentry:	
  1936                           ;incstack = 0
  1937                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1938                           
  1939  0004                     interrupt_function:	
  1940  007E                     saved_w	set	btemp
  1941  0004  00FE               	movwf	btemp
  1942  0005  0E03               	swapf	3,w
  1943  0006  00F1               	movwf	??_ISR+1
  1944  0007  0804               	movf	4,w
  1945  0008  00F2               	movwf	??_ISR+2
  1946  0009  080A               	movf	10,w
  1947  000A  00F3               	movwf	??_ISR+3
  1948  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1949  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1950  000D  087F               	movf	btemp+1,w
  1951  000E  00F4               	movwf	??_ISR+4
  1952  000F  118A  2966         	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     15      66
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    LEDSetup@initialPhase.nextPhase	PTR struct Phase size(1) Largest target is 3
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    phase3.nextPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    phase2.nextPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    phase1.nextPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    phase0.nextPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    led4.initialPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    led3.initialPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    led2.initialPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    led1.initialPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    led0.initialPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    ?_phaseSetup.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    updateLED@led.currentPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    updateLED@led.initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    updateLED@led.currentPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 
		 -> phase3(BANK0[3]), 

    updateLED@led	PTR struct LED size(1) Largest target is 8
		 -> led0(BANK0[6]), led1(BANK0[6]), led2(BANK0[6]), led3(BANK0[6]), 
		 -> led4(BANK0[6]), 

    turnOnLED@led.currentPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    turnOnLED@led.initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    turnOnLED@led.currentPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 
		 -> phase3(BANK0[3]), 

    turnOnLED@led	PTR struct LED size(1) Largest target is 8
		 -> led0(BANK0[6]), led1(BANK0[6]), led2(BANK0[6]), led3(BANK0[6]), 
		 -> led4(BANK0[6]), 

    setupPhase@phase.nextPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    setupPhase@nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    setupPhase@phase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    setupPhase@phase	PTR struct Phase size(1) Largest target is 4
		 -> phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), phase3(BANK0[3]), 

    setupLED@led.initialPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    setupLED@initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    setupLED@led.initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    setupLED@led.currentPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 
		 -> phase3(BANK0[3]), 

    setupLED@led	PTR struct LED size(1) Largest target is 8
		 -> led0(BANK0[6]), led1(BANK0[6]), led2(BANK0[6]), led3(BANK0[6]), 
		 -> led4(BANK0[6]), 

    LEDSetup@initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    sp__phaseSetup.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    main@initialPhase.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    sp__phaseSetup	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    main@initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    led0.initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    led0.currentPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 
		 -> phase3(BANK0[3]), 

    led1.initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    led1.currentPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 
		 -> phase3(BANK0[3]), 

    led2.initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    led2.currentPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 
		 -> phase3(BANK0[3]), 

    led3.initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    led3.currentPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 
		 -> phase3(BANK0[3]), 

    S30LED$initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    led4.initialPhase	PTR struct Phase size(1) Largest target is 4
		 -> phase3(BANK0[3]), 

    S30LED$currentPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 
		 -> phase3(BANK0[3]), 

    led4.currentPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 
		 -> phase3(BANK0[3]), 

    phase0.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    phase1.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    phase2.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    S22Phase$nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 

    phase3.nextPhase	PTR struct Phase size(1) Largest target is 4
		 -> NULL(NULL[0]), phase0(BANK0[3]), phase1(BANK0[3]), phase2(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateLED
    _updateLED->___lbmod
    _phaseSetup->_setupPhase
    _LEDSetup->_setupLED

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    3981
                                             11 BANK0      4     4      0
                           _LEDSetup
                         _phaseSetup
                              _setup
                            _t1setup
                            _t2setup
                          _turnOnLED
                          _updateLED
 ---------------------------------------------------------------------------------
 (1) _updateLED                                            4     4      0     995
                                              7 BANK0      4     4      0
                             ___bmul
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     297
                                              0 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     201
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _turnOnLED                                            2     2      0     305
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _t2setup                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _t1setup                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _phaseSetup                                           3     3      0    1086
                                              5 BANK0      3     3      0
                         _setupPhase
 ---------------------------------------------------------------------------------
 (2) _setupPhase                                           5     2      3    1086
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _LEDSetup                                             4     4      0    1558
                                              5 BANK0      4     4      0
                           _setupLED
 ---------------------------------------------------------------------------------
 (2) _setupLED                                             5     2      3    1373
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LEDSetup
     _setupLED
   _phaseSetup
     _setupPhase
   _setup
   _t1setup
   _t2setup
   _turnOnLED
   _updateLED
     ___bmul
     ___lbmod

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       5        0.0%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      F      42       3       82.5%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4C      10        0.0%
ABS                  0      0      4C       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Sep 10 00:36:30 2014

               ___bmul@product 0054                    __CFG_CP$OFF 0000                  _LEDOnMaskNext 0024  
                           fsr 0004                            l507 0214                            _PR2 0092  
                 __CFG_CPD$OFF 0000                            _ISR 0166                            u555 0200  
                          fsr0 0004                            indf 0000                           ?_ISR 0070  
                         l1210 009A                           l1204 008F                           l1054 02A0  
                         l1150 00D6                           l1072 01FD                           l1216 00A5  
                         l1058 02A6                           l1156 00F6                           l1158 0103  
                         l1192 007B                           l1176 0047                           l1198 0084  
                         _TMR2 0011                           _WPUA 0095                           _led0 0028  
                         _led1 002E                           _led2 0034                           _led3 003A  
                         _led4 0040                           _doof 0025                           _main 002E  
                         btemp 007E                  __CFG_BOREN$ON 0000                           ltemp 007E  
                         start 0011                           ttemp 007E                           wtemp 007E  
                __CFG_IESO$OFF 0000              ___bmul@multiplier 0055                  __CFG_MCLRE$ON 0000  
                        ??_ISR 0070               __end_of_LEDSetup 0166                          ?_main 0070  
                __CFG_WDTE$OFF 0000                __end_of___lbmod 021A                          _ANSEL 011E  
              __end_of_t1setup 02C0                __end_of_t2setup 0286                   updateLED@led 005C  
                        i1l134 01A9                          _TMR1H 000F                          _TMR1L 000E  
                        _PORTC 0007                          _TRISA 0085                          _TRISC 0087  
               __CFG_FCMEN$OFF 0000                          _onoff 0079                          _setup 0286  
                        main@i 005E                          pclath 000A                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          status 0003  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F                __initialization 0013                   __end_of_main 00B1  
                       ??_main 005D                setupPhase@phase 0056                         ?_setup 0070  
                       _ANSELH 011F                     _t1IntCount 0026                         i1l1022 0177  
                       i1l1036 0193                         i1l1028 0184                 __CFG_PWRTE$OFF 0000  
                       ___bmul 029C                      ??___lbmod 0053                      ??_t1setup 0052  
                    ??_t2setup 0052                         _phase0 0046                         _phase1 0049  
                       _phase2 004C                         _phase3 004F                         _ontime 0076  
                       _updown 0077                   __pdataCOMMON 0075               __end_of_setupLED 023A  
                       saved_w 007E                ___lbmod@divisor 0052        __end_of__initialization 002B  
              ___lbmod@counter 0057                      ?_LEDSetup 0070            ___bmul@multiplicand 0052  
               __pcstackCOMMON 0070                   __pidataBANK0 02CB                  __end_of_setup 029C  
               _OPTION_REGbits 0081                        ??_setup 0052                     __pbssBANK0 0020  
                   ??_LEDSetup 0057                     __pmaintext 002E                        ?___bmul 0052  
                   __pintentry 0004  setupPhase@blinkCountThreshold 0053             __size_of_updateLED 005C  
           __size_of_turnOnLED 001D                   turnOnLED@led 0053                      ?_setupLED 0052  
              __size_of___bmul 0013                        ___lbmod 01F5                        _t1setup 02AF  
                      _t2setup 026F                      _LED0Count 0020                      _LED1Count 0021  
                    _LED2Count 0022                      _LED3Count 0023                        __ptext1 00B1  
                      __ptext2 01F5                        __ptext3 029C                        __ptext4 023A  
                      __ptext5 026F                        __ptext6 02AF                        __ptext7 0286  
                      __ptext8 01B4                        __ptext9 0257                   __size_of_ISR 004E  
                    _T1CONbits 0010                      _T2CONbits 0012                     _phaseSetup 01B4  
                      _offtime 0075                      _LEDOnMask 0078                        clrloop0 02C1  
         end_of_initialization 002B              __end_of_updateLED 010D                     ??_setupLED 0055  
                  setupLED@led 0056                      _PORTAbits 0005                     _setupPhase 0257  
            __end_of_turnOnLED 0257                     _updateLEDs 0027               ___lbmod@dividend 0056  
                  ___lbmod@rem 0058            setupPhase@nextPhase 0054                    _CCP1CONbits 0017  
              setupLED@LEDMask 0052               main@initialPhase 0060              __size_of_LEDSetup 0059  
               __end_of___bmul 02AF                  __pidataCOMMON 02C8                    ?_phaseSetup 0070  
          start_initialization 0013                    __end_of_ISR 01B4           LEDSetup@initialPhase 005A  
                     ??___bmul 0053                    __pdataBANK0 0061                    ?_setupPhase 0052  
                  __pbssCOMMON 0078                      ___latbits 0001                  __pcstackBANK0 0052  
          __size_of_phaseSetup 0041                       ?___lbmod 0052                       ?_t1setup 0070  
                     ?_t2setup 0070              __size_of_setupLED 0020                 __size_of_setup 0016  
            interrupt_function 0004                updateLED@retval 005B                       _LEDSetup 010D  
          __size_of_setupPhase 0018                      clear_ram0 02C0                       _PIE1bits 008C  
       setupPhase@blinkDivisor 0052                       _PIR1bits 000C                      _updateLED 00B1  
                    _turnOnLED 023A                    _cycle_state 0061               __size_of___lbmod 0025  
             __size_of_t1setup 0011               __size_of_t2setup 0017                     ?_updateLED 0070  
                 ??_phaseSetup 0057                     ?_turnOnLED 0070                       __ptext10 010D  
                     __ptext11 021A                       __ptext12 0166                  __size_of_main 0083  
           __end_of_phaseSetup 01F5                       _setupLED 021A                   ??_setupPhase 0055  
                   _INTCONbits 000B           setupLED@initialCount 0053           setupLED@initialPhase 0054  
                     intlevel1 0000             __end_of_setupPhase 026F                     _OSCCONbits 008F  
                  ??_updateLED 0059                    ??_turnOnLED 0052              __CFG_FOSC$INTRCIO 0000  
